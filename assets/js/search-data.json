{
  
    
        "post0": {
            "title": "CPT Draft",
            "content": "CPT Video . Write-Up . Describe Procedural Abstraction, discussion on code and abstraction techniques used: Frontend/Backend, Functions, Classes, etc | Describe Data Abstraction, discussion on data used and data structures to support project: JSON, Dictionaries, Lists, and/or Database Tables. | Describe Usage of Control Structures, ie Iteration and Conditional Statements. Areas where you use lists and interation in Frontend Display. Areas were you decide and execulte different paths of code, for instance Create vs Read vs Update vs Delete. Also, show a function where a different parameter or condition causes a differen result. | . Procedural Abstraction is a programming concept that involves breaking down a complex system into smaller, more manageable, and reusable pieces of code. It involves separating the code that performs a task from the code that implements that task. . In the provided code, we can see examples of procedural abstraction in the use of functions to implement different tasks. For instance, we have functions such as randomNum(), guessNum(), and startgame(), which are all responsible for specific tasks in the game. These functions have been separated from the main code to make the main code easier to read and understand. . Code Examples: . or instance, the randomNum() function generates a random number between 1 and 100, which is used as the number to be guessed. . def randomNum(): # generates a random number between 1 and 100 return random.randint(1,100) . The function guessNum() handles the user input and checks if the guess is correct. . def guessNum(): # handles the user input and checks if the guess is correct guess = int(guessField.get()) if guess == number: resultLabel.config(text=&quot;Congratulations! You guessed it!&quot;) elif guess &lt; number: resultLabel.config(text=&quot;Your guess is too low. Try again.&quot;) else: resultLabel.config(text=&quot;Your guess is too high. Try again.&quot;) . Finally, the startgame() function is called when the user clicks on the play button and initializes the game. This separation of code into smaller pieces that perform specific tasks makes the code more modular, easier to test and debug, and more maintainable. . def startgame(): # called when the user clicks on the play button and initializes the game global number number = randomNum() guessField.delete(0, &#39;end&#39;) resultLabel.config(text=&quot;&quot;) . Abstraction techniques used in the provided code include: . Functions: Functions are used to separate the code that performs a task from the code that implements that task. They are used to break down complex tasks into smaller and more manageable pieces of code. . def add_numbers(num1, num2): &quot;&quot;&quot; This function adds two numbers and returns the result. &quot;&quot;&quot; return num1 + num2 result = add_numbers(5, 7) print(result) # Output: 12 . Classes: Although there are no classes in the provided code, classes are also a form of procedural abstraction. They allow us to define objects with specific attributes and methods, which can be used to perform specific tasks. . class Person: def __init__(self, name, age): self.name = name self.age = age def say_hello(self): print(f&quot;Hello, my name is {self.name} and I am {self.age} years old.&quot;) person = Person(&quot;John&quot;, 30) person.say_hello() # Output: &quot;Hello, my name is John and I am 30 years old.&quot; . Libraries and APIs: Libraries and APIs can also be used as a form of procedural abstraction. They provide pre-built code that can be used to perform specific tasks, without the user having to understand how the code is implemented.Overall, the use of procedural abstraction in the provided code makes it easier to read, maintain, and test. . import requests response = requests.get(&quot;https://api.github.com/users/johndoe&quot;) data = response.json() print(data[&quot;name&quot;]) # Output: &quot;John Doe&quot; . Data Abstraction is a programming concept that involves hiding the implementation details of data and exposing only the essential information. It involves creating a simplified representation of complex data structures that is easier to understand and work with. . In the provided code, we can see examples of data abstraction in the use of data structures such as JSON, dictionaries, and lists. For instance, the randomNum() function generates a random number between 1 and 100 and stores it in a global variable called randomNumber. This variable is then used in other functions to compare the user&#39;s input and determine if it matches the generated number. . import random tokens = 25 def randomNum(): global secret_number secret_number = random.randint(1, 100) . In addition, the game tokens are represented as a numerical value that is stored in a global variable called tokens. The number of tokens is updated whenever the user makes a guess. These variables are simple representations of more complex data structures and are easier to work with. . Abstraction techniques used in the provided code include: . The function calculateTotalPrice abstracts away the specific details of how to calculate the total price of a shopping cart. The function takes a shopping cart as an input parameter, and then iterates through each item in the cart and calculates the total price by multiplying the price of each item with its quantity and adding it to the running total. This implementation detail is hidden from the calling code, which only needs to know how to call the calculateTotalPrice function and pass it a shopping cart. . function calculateTotalPrice(cart) { let totalPrice = 0; for (let item of cart) { totalPrice += item.price * item.quantity; } return totalPrice; } .",
            "url": "https://joshuaw03628.github.io/Repository-1/notebooks/2023/04/07/CPT-Draft.html",
            "relUrl": "/notebooks/2023/04/07/CPT-Draft.html",
            "date": " • Apr 7, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit_4review",
            "content": "",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/04/05/Unit_4Review.html",
            "relUrl": "/2023/04/05/Unit_4Review.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "MCQ Corrections",
            "content": ". Corrections: . Question 24; . The correct Answer was D; Sorting Data, it was a miss-input . Question 29; . Answer C This option is correct. Using 6-bit binary sequences allows for 26 or 64 different items to be identified. Using 7-bit binary sequences allows for 27 or 128 different items to be identified. Thus there are two times as many items that can be uniquely identified. . Question 42; . Answer B Correct. Two calls to this procedure can be used to determine if a particular word appears in each of two text files. If both calls return true, then the word appears in both text files. . Question 45; . Answer B Correct. This code segment draws the four circles shown in the figure. Each circle has a radius of 1 unit. The circles are centered at (2, 2), (2, 5), (5, 2), and (5, 5). .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2023/04/03/MCQ-4_Corrections.html",
            "relUrl": "/posts/2023/04/03/MCQ-4_Corrections.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson Plan",
            "content": "Lesson Plan: Introduction to Data Analysis with NumPy and Pandas . Big Idea 2: Data Analysis with Python Libraries . Learning Objectives: . Understand the basics of data analysis | Learn about NumPy and Pandas libraries | Import and manipulate data using NumPy and Pandas | Perform basic data analysis tasks using NumPy and Pandas | . Materials: . Laptop/desktop with Python and Jupyter Notebook installed Sample data files (CSV format) . Introduction : Shruthi . Introduction to data analysis and its importance | Explanation of NumPy and Pandas libraries | Overview of the lesson plan and learning objectives | . Part 1: Josh . Explanation of NumPy and its uses in data analysis | Importing NumPy library | Creating NumPy arrays and performing basic array operations | Example of using NumPy for mathematical operations on data | . Part 2 Pandas: Ahad . Explanation of Pandas and its uses in data analysis | Importing Pandas library | Loading data into Pandas DataFrames from CSV files | Manipulating and exploring data in Pandas DataFrames | Example of using Pandas for data analysis tasks such as filtering and sorting | . Part 3: Data Analysis with NumPy and Pandas: Yasha . Example of analyzing data using both NumPy and Pandas libraries | Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library | . Conclusion : James . Recap of what was covered in the lesson | Importance of data analysis and how it can be used in various fields | Resources for further learning about NumPy and Pandas libraries | . Assessment: Quinn . Quizzes and exercises based on the covered topics | Practical assessment on analyzing data using NumPy and Pandas | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2023/04/03/Lesson_Plan.html",
            "relUrl": "/posts/2023/04/03/Lesson_Plan.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "curry_l5 = { &quot;coach&quot;: &quot;Steve Kerr&quot;, &quot;player&quot;: &quot;Stephen Curry&quot;, &quot;year&quot;: 2023, &quot;team&quot;: &quot;Warriors&quot;, &quot;last_games&quot;: { 1: &quot;29,4,8&quot;, 2: &quot;37,2,7&quot;, 3: &quot;25,8,8&quot;, 4: &quot;20,5,5&quot;, 5: &quot;33,9,9&quot;, } } # Adding a new key-value pair to the &quot;Last Games&quot; dictionary curry_l5[&quot;last_games&quot;][6] = &quot;27,6,5&quot; # Printing the dictionary print(curry_l5) . {&#39;coach&#39;: &#39;Steve Kerr&#39;, &#39;player&#39;: &#39;Stephen Curry&#39;, &#39;year&#39;: 2023, &#39;team&#39;: &#39;Warriors&#39;, &#39;last_games&#39;: {1: &#39;29,4,8&#39;, 2: &#39;37,2,7&#39;, 3: &#39;25,8,8&#39;, 4: &#39;20,5,5&#39;, 5: &#39;33,9,9&#39;, 6: &#39;27,6,5&#39;}} . print(curry_l5.get(&#39;last_games&#39;)) . print(curry_l5.get(&#39;last_games&#39;)[1]) . curry_l5[&quot;last_games&quot;] = [&#39;25,7,3&#39;,&#39;37,8,8&#39;,&#39;25,7,3&#39;,&#39;22, 10, 10&#39;] curry_games = set ([&#39;25, 7, 3&#39;, &#39;37, 8, 8&#39;, &#39;22, 10, 10&#39;]) # What can you change to make sure there are no duplicate producers? # Use a &quot;set&quot; # make sure there aren&#39;t any in the first place # Printing the dictionary print(curry_games) . curry_l5[&quot;last_games&quot;].update({6: &quot;35, 6, 5&quot;}) # Printing the updated dictionary print(curry_l5) . {&#39;coach&#39;: &#39;Steve Kerr&#39;, &#39;player&#39;: &#39;Stephen Curry&#39;, &#39;year&#39;: 2023, &#39;team&#39;: &#39;Warriors&#39;, &#39;last_games&#39;: {1: &#39;29,4,8&#39;, 2: &#39;37,2,7&#39;, 3: &#39;25,8,8&#39;, 4: &#39;20,5,5&#39;, 5: &#39;33,9,9&#39;, 6: &#39;35, 6, 5&#39;}} . for k,v in curry_l5.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # for k,v in josh_set.items(): # print(str(k) + &quot;: &quot; + str(v)) . coach: Steve Kerr player: Stephen Curry year: 2023 team: Warriors last_games: {1: &#39;29,4,8&#39;, 2: &#39;37,2,7&#39;, 3: &#39;25,8,8&#39;, 4: &#39;20,5,5&#39;, 5: &#39;33,9,9&#39;, 6: &#39;35, 6, 5&#39;} . def search(): search = input(&quot;What would you like to know about curry?&quot;) if curry_l5.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(curry_l5.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # dd more error handling, In the current implementation, if the user enters an invalid search term, they simply receive an &quot;Invalid Search&quot; message. You could improve the code by providing more specific error messages, or by prompting the user to enter a valid search term. # Use a loop to allow for multiple searches: Currently, the code only allows for one search. You could modify the code to allow the user to perform multiple searches without having to restart the program. . {1: &#39;29,4,8&#39;, 2: &#39;37,2,7&#39;, 3: &#39;25,8,8&#39;, 4: &#39;20,5,5&#39;, 5: &#39;33,9,9&#39;, 6: &#39;35, 6, 5&#39;} .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/03/29/hashmapshacks.html",
            "relUrl": "/2023/03/29/hashmapshacks.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "UC San Marcos Extra Credit",
            "content": "Ambassadors . John | Ashley | . Stories on campus . Ashley, she works in a quantum computing group, joined because she likes physics. Cal State is one of the few that had applied physics. She failed calc 1 &amp; 3. Fell in love with physics and going for PHD in material science and engineering. “Cal State is the perfect place to experience failure”. . John, Started at Palomar for 3 years. 2 associates, one in computer science. His experience was interesting because he didnt see the San Marcos campus until his senior year, now works there. Took 6 years to get his bachelors done in ComSci. . Cool Facts About san Marcos . provides internships | 250 staircases at San Marcos | . Pathways . Vio Chemistry | Chemistry | Physics | Applied Physics | Biological sciences | Lots of options for computer science | master capability in cyber security | computer engineering. | Education | Algorithm | Engineering | etc. | . Clubs . Robotics | CyberSecurity Club | Women in STEM | . Internship . , How to find: Networking, going to campus events, google, etc. . Try to avoid unpaid internships | . Programs . Summer Scholars program; 10 weeks research done with an advisor, $6000 | Quantum Bridge Program; 4 week program where you learn about quantum information sciences. | etc. | . Paying for College . Scholarship Can get one in any way pretty much, as long as you accel at something. . | Grants given by the government to help poorer families. . | . ** Loans, 2 types ** . subsidized loan A loan that is partially funded by the government to prevent you going deeper in debt. | unsubsidized loan You start occurring interest on your loan as soon as the semester finishes, costs more. | . Grad school . You can get paid to go to grad school. | | . Questions . Transferring from 1 university to another is common and you can get help from academic counselors | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2023/03/28/uc_sanmarcos.html",
            "relUrl": "/posts/2023/03/28/uc_sanmarcos.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Tri 3 Agile Manifest and Team Roles",
            "content": ". Team Roles . Scrum Master: Ahad . Front-end: Shruthi/Quinn . Backend: Josh . Product Owner: James . Technical Lead: Yasha .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2023/03/27/agile_manifesto_tri3.html",
            "relUrl": "/posts/2023/03/27/agile_manifesto_tri3.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Space/Time Hacks",
            "content": "Code Efficiency and Runtime . While studying Code efficiency and runtime, I have discovered 4 things that affect the runtime of a code cell . Algorithm Complexity: . Algorithms that have a higher time complexity, such as those with nested loops or recursion, tend to take longer to execute compared to simpler algorithms. For example, an algorithm that has a time complexity of O(n^4) will take much longer to execute than an algorithm with a time complexity of O(n). . O(n) . import time def linear_search(arr, target): start = time.time() n = len(arr) for i in range(n): if arr[i] == target: end = time.time() print(f&quot;Time taken: {end - start}&quot;) return i end = time.time() print(f&quot;Time taken: {end - start}&quot;) return -1 arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] target = 7 index = linear_search(arr, target) print(f&quot;Target {target} found at index {index}&quot;) . O(n^4) . import time def slow_algorithm(n): start = time.time() result = 0 for i in range(n): for j in range(n): for k in range(n): for l in range(n): result += i + j * k - l end = time.time() print(f&quot;Time taken: {end - start}&quot;) return result slow_algorithm(100) . Input Data Size: . The time taken by an algorithm can also depend on the size of the input data. Algorithms that process larger amounts of data tend to take longer to execute than those that process smaller amounts of data. For example, a sorting algorithm that sorts a list of 10,000 items will take longer to execute than one that sorts a list of 10 items. . import random import time def sort_list(list_size): # Generate a list of random integers with the specified size my_list = [random.randint(1, 100) for _ in range(list_size)] # Time how long it takes to sort the list start_time = time.time() sorted_list = sorted(my_list) end_time = time.time() # Print the sorted list and the time taken to sort it print(f&quot;Sorted list of size {list_size}: {sorted_list}&quot;) print(f&quot;Time taken to sort: {end_time - start_time} seconds&quot;) . sort_list(10) # Should be pretty fast . sort_list(1000000) # Should take a bit longer . sort_list(5000000) # Should take even longer . Programming Language Efficiency: . Some programming languages are inherently more efficient than others, and algorithms implemented in these languages tend to execute faster. For example, C++ is generally faster than Python because it is a compiled language and has lower overhead. . Hardware: . The underlying hardware also plays a role in the time taken by an algorithm. Faster processors and more memory can lead to faster execution times. . Basic Research on Sorting Algorithms . Bubble sort: Bubble sort is a simple sorting algorithm that repeatedly compares adjacent elements and swaps them if they are in the wrong order. The time complexity of bubble sort is O(n^2), which means that it is not very efficient for large input sizes. . | Selection sort: Selection sort is another simple sorting algorithm that works by repeatedly finding the minimum element from the unsorted part of the list and moving it to the beginning of the list. The time complexity of selection sort is O(n^2), which is not very efficient for large input sizes. . | Insertion sort: Insertion sort is a simple sorting algorithm that builds the final sorted list one item at a time. It works by comparing each item with those before it and swapping them if they are in the wrong order. The time complexity of insertion sort is O(n^2), which is not very efficient for large input sizes. . | Merge sort: Merge sort is a divide-and-conquer algorithm that recursively divides the input list into smaller sub-lists until each sub-list contains only one element. It then merges these sub-lists back together in sorted order. The time complexity of merge sort is O(n log n), which makes it more efficient than the previous algorithms for large input sizes. . | Quick sort: Quick sort is another divide-and-conquer algorithm that works by selecting a &quot;pivot&quot; element from the input list and partitioning the other elements into two sub-lists, according to whether they are less than or greater than the pivot. The sub-lists are then recursively sorted. The time complexity of quick sort is O(n log n), which makes it more efficient than the previous algorithms for large input sizes. . | Heap sort: Heap sort is another divide-and-conquer algorithm that works by first arranging the elements of the list into a binary heap. It then repeatedly extracts the maximum element from the heap and rebuilds the heap until the list is sorted. The time complexity of heap sort is O(n log n), which makes it more efficient than the previous algorithms for large input sizes. . | . Overall, the most efficient sorting algorithms for large input sizes are merge sort, quick sort, and heap sort, all of which have a time complexity of O(n log n). However, bubble sort, selection sort, and insertion sort are still useful for small input sizes or when simplicity is more important than efficiency. . Why is time and space complexity important when choosing an algorithm? . Time and space complexity are important factors to consider when choosing an algorithm because they affect the efficiency and scalability of the algorithm. . Time complexity refers to the amount of time an algorithm takes to complete as the size of the input data grows. In other words, it measures how the algorithm&#39;s runtime grows with increasing input size. An algorithm with a lower time complexity is generally faster and more efficient than an algorithm with a higher time complexity. Therefore, when choosing an algorithm, it&#39;s important to consider the time complexity to ensure that it can handle the size of the input data and perform well in a reasonable amount of time. . Space complexity, on the other hand, refers to the amount of memory an algorithm requires to complete as the size of the input data grows. In other words, it measures how the algorithm&#39;s memory usage grows with increasing input size. An algorithm with lower space complexity is generally more memory efficient and can handle larger input sizes than an algorithm with a higher space complexity. Therefore, when choosing an algorithm, it&#39;s important to consider the space complexity to ensure that it can handle the available memory resources and perform well in a reasonable amount of time. . Choosing an algorithm with an appropriate time and space complexity can significantly impact the performance and efficiency of a program. In general, the goal is to find an algorithm that can handle the largest input size with the fastest runtime and lowest memory usage possible. . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . No, you should not always use a constant time algorithm or never use an exponential time algorithm. The choice of algorithm depends on the problem at hand and the constraints of the system it&#39;s being run on. . A constant time algorithm has a time complexity that does not depend on the size of the input data. This means that the algorithm takes the same amount of time to complete regardless of the input size. Constant time algorithms are generally preferred because they are efficient and predictable. However, not all problems can be solved using a constant time algorithm, and sometimes the problem size may grow beyond what a constant time algorithm can handle efficiently. . An exponential time algorithm has a time complexity that grows exponentially with the size of the input data. This means that the algorithm may take an extremely long time to complete as the input size increases. Exponential time algorithms are generally not preferred because they are inefficient and can quickly become impractical for larger input sizes. However, sometimes exponential time algorithms are the only known solution for a particular problem, and in these cases, they may be the best option available. . Ultimately, the choice of algorithm depends on a variety of factors, including the size and complexity of the input data, the desired runtime and memory constraints, and the available computational resources. It&#39;s important to carefully analyze these factors and choose the most appropriate algorithm for the specific problem and situation. . What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . There are several general patterns that can be used to determine the time and space complexity of an algorithm: . Loops: If an algorithm has one or more loops that iterate over the input data, the time complexity is often proportional to the number of iterations. For example, a loop that iterates n times has a time complexity of O(n). . Recursion: If an algorithm uses recursion, the time complexity is often related to the number of recursive calls that are made. For example, if a recursive function is called k times, each with a problem size that is reduced by a constant factor c, the time complexity is O(c^k). . Sorting: Sorting algorithms have a time complexity that is often related to the size of the input data. For example, the time complexity of bubble sort and insertion sort is O(n^2), while the time complexity of merge sort and quicksort is O(n log n). . Data structures: The time and space complexity of an algorithm can be affected by the data structures it uses. For example, using a hash table to store and look up data can provide constant time complexity, while using a binary search tree can provide logarithmic time complexity. . Divide and conquer: Algorithms that use a divide and conquer strategy often have a time complexity that is related to the number of recursive calls made, and the size of the sub-problems that are solved. For example, the time complexity of the binary search algorithm is O(log n), where n is the size of the input data. . These are just a few examples of general patterns that can be used to determine the time and space complexity of an algorithm. It&#39;s important to analyze the specific characteristics of each algorithm to accurately determine its time and space complexity. . Time &amp; Space Complexity Analysis Questions. . 1. What is the time, and space complexity of the following code: . int a = 0, b = 0; for (i = 0; i &lt; N; i++) { a = a + rand(); } for (j = 0; j &lt; M; j++) { b = b + rand(); } Options: . O(N * M) time, O(1) space | O(N + M) time, O(N + M) space | O(N + M) time, O(1) space | O(N * M) time, O(N + M) space | . Answer: 3. O(N + M) time, O(1) space . 2. What is the time complexity of the following code: . int a = 0; for (i = 0; i &lt; N; i++) { for (j = N; j &gt; i; j--) { a = a + i + j; } } Options: . O(N) | O(N*log(N)) | O(N * Sqrt(N)) | O(N*N) | . Answer: 4. O(N*N) . 3. What is the time complexity of the following code: . int i, j, k = 0; for (i = n / 2; i &lt;= n; i++) { for (j = 2; j &lt;= n; j = j * 2) { k = k + n / 2; } } . O(n) | O(N log N) | O(n^2) | O(n^2Logn) | . Answer: 2. O(nLogn) . 4. What does it mean when we say that an algorithm X is asymptotically more efficient than Y? . X will always be a better choice for small inputs | X will always be a better choice for large inputs | Y will always be a better choice for small inputs | X will always be a better choice for all inputs | . Answer: 2. X will always be a better choice for large inputs . 5. What is the time complexity of the following code: . int a = 0, i = N; while (i &gt; 0) { a += i; i /= 2; } Options: . O(N) | O(Sqrt(N)) | O(N / 2) | O(log N) | . Answer: 4. O(log N) . 6. Which of the following best describes the useful criterion for comparing the efficiency of algorithms? . Time | Memory | Both of the above | None of the above | . Answer: 3. Both of the above . 7. How is time complexity measured? . By counting the number of algorithms in an algorithm. | By counting the number of primitive operations performed by the algorithm on a given input size. | By counting the size of data input to the algorithm. | None of the above | . Answer: 2. By counting the number of primitive operations performed by the algorithm on a given input size. . 8. What will be the time complexity of the following code? . for(var i=0;i&lt;n;i++) i*=k . O(n) | O(k) | O(logkn) | O(lognk) | . Answer: 3. O(logkn) . 9. What will be the time complexity of the following code? . int value = 0; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;i;j++) value += 1; . n | (n+1) | n(n-1) | n(n+1) | . Answer: 3. n(n-1) . 10. Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A. . True or False | . Answer: False .",
            "url": "https://joshuaw03628.github.io/Repository-1/notebooks/2023/03/22/space_time_hacks.html",
            "relUrl": "/notebooks/2023/03/22/space_time_hacks.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "2.4 Hacks",
            "content": "import sqlite3 # Create a connection to the database conn = sqlite3.connect(&quot;/Users/josh/Repository-1/_notebooks/instance/nba.db&quot;) c = conn.cursor() # Create the table if it doesn&#39;t exist c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS players (name text, year_start text, year_end text)&#39;&#39;&#39;) def create_player(name, year_start, year_end): c.execute(&quot;INSERT INTO players (name, year_start, year_end) VALUES (?, ?, ?)&quot;, (name, year_start, year_end)) conn.commit() print(&quot;Player data implemented&quot;) def read_players(): c.execute(&quot;SELECT * FROM players&quot;) rows = c.fetchall() for row in rows: print(row) def read_player(name): c.execute(&quot;SELECT * FROM players WHERE name=?&quot;, (name,)) row = c.fetchone() if row: print(row) else: print(&quot;Player not found.&quot;) def update_player(name, year_start, year_end): c.execute(&quot;UPDATE players SET year_start=?, year_end=? WHERE name=?&quot;, (year_start, year_end, name)) conn.commit() print(&quot;Player updated successfully.&quot;) def delete_player(name): c.execute(&quot;DELETE FROM players WHERE name=?&quot;, (name,)) conn.commit() print(&quot;Player deleted successfully.&quot;) # Get user input to decide which function to use print(&quot;Enter 1 to create a player.&quot;) print(&quot;Enter 2 to read all players.&quot;) print(&quot;Enter 3 to read a specific player.&quot;) print(&quot;Enter 4 to update a player.&quot;) print(&quot;Enter 5 to delete a player.&quot;) choice = input(&quot;Choice: &quot;) # Call the appropriate function based on user input if choice == &quot;1&quot;: name = input(&quot;Enter the name: &quot;) year_start = input(&quot;Enter the year_start: &quot;) year_end = input(&quot;Enter the year_end: &quot;) create_player(name, year_start, year_end) elif choice == &quot;2&quot;: read_players() elif choice == &quot;3&quot;: name = input(&quot;Enter the player name: &quot;) read_player(name) elif choice == &quot;4&quot;: name = input(&quot;Enter the name: &quot;) year_start = input(&quot;Enter the new year_start: &quot;) year_end = input(&quot;Enter the new year_end: &quot;) update_player(name, year_start, year_end) elif choice == &quot;5&quot;: name = input(&quot;Enter the name: &quot;) delete_player(name) else: print(&quot;Invalid choice.&quot;) # Close the database connection conn.close() . Enter 1 to create a player. Enter 2 to read all players. Enter 3 to read a specific player. Enter 4 to update a player. Enter 5 to delete a player. (&#39;Wilt Chamberlain&#39;, &#39;1949&#39;, &#39;1960&#39;) (&#39;Spud Webb&#39;, &#39;1980&#39;, &#39;1989&#39;) .",
            "url": "https://joshuaw03628.github.io/Repository-1/notebooks/2023/03/19/2.4_Hacks.html",
            "relUrl": "/notebooks/2023/03/19/2.4_Hacks.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | What is the &quot;f&quot; and {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | .",
            "url": "https://joshuaw03628.github.io/Repository-1/lessons/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/lessons/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "2.4 Notes",
            "content": "app - object, assign things to this object, these are called setters db - class - a template for a future object db model &amp; inheritance - defining a class is called inheritance, inherit the capability to make our class use database properties,methods, and attributes. . the init method is called the constructor and that means that the method is used to help instantiate an object from our user class. .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/03/14/2.4-Notes.html",
            "relUrl": "/2023/03/14/2.4-Notes.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.4 Jupyter Notebook With Table",
            "content": "Jupyter Notebook With Table. . import pandas as pd # Read CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/Users/josh/Downloads/archive/player_data.csv&#39;) # Display the DataFrame print(df.head()) . print(df.describe()) . Gathering info on all people in the csv file and giving the max, min, mean and percentiles for weight in lbs. . import sqlite3 # Create a connection to the database conn = sqlite3.connect(&quot;nba.db&quot;) c = conn.cursor() # Create the table if it doesn&#39;t exist c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS players (name text, year_start text, year_end text)&#39;&#39;&#39;) def create_player(name, year_start, year_end): c.execute(&quot;INSERT INTO players (name, year_start, year_end) VALUES (?, ?, ?)&quot;, (name, year_start, year_end)) conn.commit() print(&quot;Player data implemented&quot;) def read_players(): c.execute(&quot;SELECT * FROM players&quot;) rows = c.fetchall() for row in rows: print(row) def read_player(name): c.execute(&quot;SELECT * FROM players WHERE name=?&quot;, (name,)) row = c.fetchone() if row: print(row) else: print(&quot;Player not found.&quot;) def update_player(name, year_start, year_end): c.execute(&quot;UPDATE players SET year_start=?, year_end=? WHERE name=?&quot;, (year_start, year_end, name)) conn.commit() print(&quot;Player updated successfully.&quot;) def delete_player(name): c.execute(&quot;DELETE FROM players WHERE name=?&quot;, (name,)) conn.commit() print(&quot;Player deleted successfully.&quot;) # Get user input to decide which function to use print(&quot;Enter 1 to create a player.&quot;) print(&quot;Enter 2 to read all players.&quot;) print(&quot;Enter 3 to read a specific player.&quot;) print(&quot;Enter 4 to update a player.&quot;) print(&quot;Enter 5 to delete a player.&quot;) choice = input(&quot;Choice: &quot;) # Call the appropriate function based on user input if choice == &quot;1&quot;: name = input(&quot;Enter the name: &quot;) year_start = input(&quot;Enter the year_start: &quot;) year_end = input(&quot;Enter the year_end: &quot;) create_player(name, year_start, year_end) elif choice == &quot;2&quot;: read_players() elif choice == &quot;3&quot;: name = input(&quot;Enter the player name: &quot;) read_player(name) elif choice == &quot;4&quot;: name = input(&quot;Enter the name: &quot;) year_start = input(&quot;Enter the new year_start: &quot;) year_end = input(&quot;Enter the new year_end: &quot;) update_player(name, year_start, year_end) elif choice == &quot;5&quot;: name = input(&quot;Enter the name: &quot;) delete_player(name) else: print(&quot;Invalid choice.&quot;) # Close the database connection conn.close() . Enter 1 to create a player. Enter 2 to read all players. Enter 3 to read a specific player. Enter 4 to update a player. Enter 5 to delete a player. (&#39;Wilt Chamberlain&#39;, &#39;1949&#39;, &#39;1960&#39;) .",
            "url": "https://joshuaw03628.github.io/Repository-1/notebooks/2023/03/14/2.4-Notebook.html",
            "relUrl": "/notebooks/2023/03/14/2.4-Notebook.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://joshuaw03628.github.io/Repository-1/lessons/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/lessons/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "2.2 & 2.3 Hacks",
            "content": "Here&#39;s an implementation of manipulating pixels in an image to produce red and purple scale versions (2.2): . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Gsquare&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Cimpression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lvolcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_red(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_data&#39;] = [] # key/value for data converted to pink scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;red_data&#39;].append((average, 0, average//5, pixel[3])) # PNG format else: image[&#39;red_data&#39;].append((average, 0, average//5)) # end for loop for pixels img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Create Grey Scale Base64 representation of Image def image_management_add_html_purple(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;purple_data&#39;] = [] # key/value for data converted to pink scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;purple_data&#39;].append((average, 0, average//1, pixel[3])) # PNG format else: image[&#39;purple_data&#39;].append((average, 0, average//1)) # end for loop for pixels img.putdata(image[&#39;purple_data&#39;]) image[&#39;html_purple&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot;- purple -&quot;) image_management_add_html_purple(image) display(HTML(image[&#39;html_purple&#39;])) print(&quot;- red image -&quot;) image_management_add_html_red(image) display(HTML(image[&#39;html_red&#39;])) print() . - meta data -- Gsquare Internet PNG RGBA Original size: (16, 16) Scaled size: (400, 400) -- original image -- . - purple - . - red image - . - meta data -- Cimpression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (400, 292) -- original image -- . - purple - . - red image - . - meta data -- Lvolcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (400, 300) -- original image -- . - purple - . - red image - . . 2.3 Hacks . this code meets that criteria by filtering for NBA players and creating a new DataFrame with only NBA player data. . import pandas as pd # Read in the CSV file as a DataFrame player_data = pd.read_csv(&#39;/Users/josh/Downloads/archive/player_data.csv&#39;) # Filter for rows where the &#39;position&#39; column is &#39;G&#39; nba_data = player_data[player_data[&#39;position&#39;] == &#39;C&#39;] # Print the first 5 rows of the NBA guard data print(nba_data.head()) . name year_start year_end position height weight 2 Kareem Abdul-Jabbar 1970 1989 C 7-2 225.0 21 Steven Adams 2014 2018 C 7-0 255.0 32 Alexis Ajinca 2009 2017 C 7-2 248.0 35 Solomon Alabi 2011 2012 C 7-1 251.0 37 Gary Alcorn 1960 1961 C 6-9 225.0 birth_date college 2 April 16, 1947 University of California, Los Angeles 21 July 20, 1993 University of Pittsburgh 32 May 6, 1988 NaN 35 March 21, 1988 Florida State University 37 October 8, 1936 California State University, Fresno .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/03/12/Tri-3-Week1Hacks.html",
            "relUrl": "/2023/03/12/Tri-3-Week1Hacks.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "MCQ#2",
            "content": "My Total Score On the Test was 46/50! . . Here are the Questions I Have Missed . Question 30 . . Commentary . The reason that I answered this question incorrectly is because for question #B has the Draw Circle command after the steps to extend the original circle. the answer that I input had it before the translation. Dumb Mistake. . Question 35 . . Commentary . The reason that I got this incorrect was because, A binary search in a sorted list compares the target value with the average of the list. If this value is not the target value, the search continues from the lower or upper half of the list, depending on whether the target value was lower or higher than the number in the middle of the list. . Question 41 . . Commentary . The reason I got this incorrect was because, A random statement (1 point out of 10) can give a score of 1, 2, 3, , 5, 6, 7, 8, 9 or 10. The chance of getting a 1 or 2 is two out of 10, or 20 percent. When this happens, the sum value is increased by 1, simulating a person voting for the candidate. . Question 46 . . Commentary . The reason I got this incorrect was because, Choosing the best move is an optimization problem that cannot be solved in a reasonable amount of time because the game is slow. If the algorithm for choosing the best move runs too slowly, the game can run faster if heuristics are used to find approximate solutions. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2023/03/10/MCQ-2.html",
            "relUrl": "/posts/2023/03/10/MCQ-2.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "2.2-2.3 Notes and Answers",
            "content": "2.2 Notes . pathlib . What are commands you use in terminal to access files? . cd (Change Directory): This command is used to change the current directory to another directory. It is commonly used to navigate through the file system. For example, to change the directory to the Desktop folder, you would enter cd ~/Desktop. . | ls (List): This command is used to list the contents of a directory. It shows you the files and folders that are located in the current directory. For example, to list the files and folders in the Desktop folder, you would enter ls ~/Desktop. . | . What are the command you use in Windows terminal to access files? . cd (Change Directory): This command is used to change the current directory to another directory. It is commonly used to navigate through the file system. For example, to change the directory to the Desktop folder, you would enter cd C: Users username Desktop. . | dir (Directory): This command is used to list the contents of a directory. It shows you the files and folders that are located in the current directory. For example, to list the files and folders in the Desktop folder, you would enter dir C: Users username Desktop. . | . What are some of the major differences? . Syntax: The syntax of the commands used in the Windows terminal is often different from that used in other operating systems. For example, the command to change directory in Windows is cd, while in Linux it is cd as well. However, the syntax for specifying the path to the directory is different. In Windows, you use backslashes () to separate directories, while in Linux and macOS, you use forward slashes (/). . | Options: The options available for the commands used in the Windows terminal are often different from those used in other operating systems. For example, the ls command in Linux has options like -l to display detailed information about files, while in Windows, the equivalent command dir uses the option /a to display hidden files. . | . Learning (Pathlib, IPython) . Why is path a big deal when working with images? . Paths are important when working with images because they specify the location of the image file on the computer’s file system. When you open or save an image file in an image editing software or any other program that deals with images, the program needs to know the path to the image file in order to access it. . How does the meta data source and label relate to Unit 5 topics? . In the context of the College Board’s AP Computer Science Principles course, Unit 5 covers the topic of data and information. The concept of metadata is relevant to this unit because it is a type of data that provides information about other data. . Metadata is used to describe the characteristics and properties of data, such as the author, date created, file format, and other relevant information. In the context of images, metadata can include information such as the camera settings used to capture the image, the date and time the image was taken, and the location where the image was taken. . The use of metadata is important in many different areas of computer science, including data management, search engines, and digital forensics. In addition, metadata is relevant to the College Board’s AP CSP course because it is an important aspect of the data and information unit. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? . Overall, IPython is an interesting tool in Jupyter Notebooks because it provides an interactive, flexible, and powerful environment for working with data and images in Python. By using IPython in Jupyter Notebooks, you can easily explore, manipulate, and visualize data and images, which can be particularly useful in data analysis, machine learning, and computer vision tasks. . Base 64 . Base64 is a way of encoding binary data (such as images, audio files, or other non-textual data) as ASCII text. It works by converting every 3 bytes of binary data into 4 bytes of ASCII text. Each group of 3 bytes is split into 4 6-bit chunks, which are then represented as characters from a set of 64 characters (hence the name “Base64”). . Translate the First 3 Letters of Your Name Into Base 64. . J = 01001010 O = 01001111 S = 01010011 . io, BytesIO . Where have you been a consumer of buffering? . Streaming Services Like Netflix, Hulu, etc. . From your consumer experience, what effects have you experienced from buffering? . When you start watching a video, the video player will download a small part of the video and store it in a buffer before playing it. As you continue to watch the video, the player will download more of the video and store it in the buffer. This ensures that there is always enough video data available to play smoothly, even if there are fluctuations in your internet connection speed. . If there is a temporary slowdown in your internet connection, the video player can continue playing from the buffer instead of pausing or buffering, which can interrupt the viewing experience. This is an example of how buffering can help ensure a smooth, uninterrupted streaming experience. . How do these effects apply to images? . Buffering can also apply to images in similar ways. For example, when you open an image on a computer or mobile device, the image viewer application may use buffering to store a portion of the image in memory before displaying it on the screen. This allows for faster image rendering and smoother scrolling or zooming within the image. . Data Structures, Imperative Programming Style, and working with Images . Does this code seem like a series of steps are being performed? . Yes, the code seems to be a series of steps being performed. . Describe Grey Scale algorithm in English or Pseudo code? . The Grey Scale algorithm converts a color image into a grayscale image by taking each pixel of the image, calculating the average of the red, green, and blue values for that pixel, and setting each of the red, green, and blue values to the average value. The resulting pixel has the same intensity value for each color channel, resulting in a grayscale image. . Describe scale image? What is before and after on pixels in three images? . The scale_image function takes a PIL (Python Imaging Library) image as an input and scales it to a base width of 320 pixels while preserving the aspect ratio. It returns the scaled image as a PIL image object. . Is scale image a type of compression? If so, line it up with College Board terms described? . Scaling an image is not a type of compression, but it can be used as a pre-processing step before compression. Scaling involves resizing the image to a smaller or larger size while maintaining the aspect ratio. This can reduce the amount of data needed to represent the image but does not involve any loss of information. . In College Board terms, scaling an image could be considered a form of pre-processing or transformation that can be applied before compression. This is similar to other pre-processing steps like smoothing, filtering, or feature extraction that may be used before applying a compression algorithm to reduce the amount of data needed to represent an image or improve the performance of the compression algorithm. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2023/03/10/2.2-2.3-Notes&Answers.html",
            "relUrl": "/posts/2023/03/10/2.2-2.3-Notes&Answers.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "2.3 Lessons",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . Pandas DataFrame Information . print(df.info()) . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) .",
            "url": "https://joshuaw03628.github.io/Repository-1/lessons/2023/03/09/AP-unit2-3.html",
            "relUrl": "/lessons/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.2 Lesson",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Mr.Mortenson&quot;, &#39;label&#39;: &quot;Truth&quot;, &#39;file&#39;: &quot;truth.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://joshuaw03628.github.io/Repository-1/lessons/2023/03/07/AP-unit2-2.html",
            "relUrl": "/lessons/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Night at the museum tri 2",
            "content": "What I did at night at the museum . What I saw . I walked through Mr.Mortensons class first and saw a bunch of people, parents, students, etc. It was cool but I was early so I walked around, I saw art, digital media, games and many other things. What I saw was all positive. No one was upset with their interaction with the teacher and all the parents had nothing but good things to say. . Nico Kermani CP . . this was a cool photo because it is made by someone I know and hes a Pheonix suns fan so it is funny because it relates to him. | The colors and the design really pop | I also hate the pheonix suns | | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2023/02/19/N@MuseumPt.2.html",
            "relUrl": "/posts/2023/02/19/N@MuseumPt.2.html",
            "date": " • Feb 19, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Mortlearning",
            "content": "DHCP . Connecting to DHCP type in domain name do DNS lookup gets id adress takes to endpoint of github.io server | .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/02/16/MortLearning.html",
            "relUrl": "/2023/02/16/MortLearning.html",
            "date": " • Feb 16, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Idiotproofing",
            "content": "How to Idiot Proof Login . Code . // idiot-proofing if (pwd === “”) { document.getElementById(‘pswd’).placeholder = “Please Enter A Password”; document.getElementById(‘pswd’).style.borderBottomColor = “red”; } . Essentially what this is doing is making it so that the password input must match with the UID | .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/02/16/IdiotProofing.html",
            "relUrl": "/2023/02/16/IdiotProofing.html",
            "date": " • Feb 16, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Corrections",
            "content": "I Scored a 46/50 . . Correction Q#30 . . I misinterpreted where the drawCircle function should be put . Correction Q#35 . . Programs with fewer lines of code do not necessarily run faster than programs with more lines of code. Also, a linear search does generally not run faster than a binary search. . Correction Q#41 . . The statement Random (1 comma 5) could evaluate to 1, 2, 3, 4, or 5. There is a two out of five, or 40 percent, chance that it could evaluate to 1 or 2. If this happens, the value of sum is increased by 1, which simulates a person voting for the candidate. This does not match the goal of the program, which is to simulate an election in which a certain candidate is expected to receive 20 percent of the vote. . Correction Q#46 . . Changing the game from single player to multiplayer does not solve the original problem. It might improve the running speed, but other methods of improving performance exist, such as using a heuristic. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/MCQ2-Corrections",
            "relUrl": "/posts/MCQ2-Corrections",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Project Blog",
            "content": "Rubric . Category Expectation Explanation . Program Purpose and Function | Describes the purpose of the program, describes the program’s functionality, and can take an input and return an output. | The purpose of this program is to provide the user with an entertaining and competitive experience through the gameplay of several virtual arcade games along with the exchange of digital currency. | . Data Abstraction | Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. | Our program abstracts data through the creation of records that are added to a backend database. The purpose of this database is to store crucial information about a user such as the number of tokens they have. This value can be used in our program to construct a leaderboard of players with the highest number of tokens in order to create a more competitive experience. | . Managing Complexity | Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. | There are many alternative methods and ways that our CPT could be created differently. This is because we can rearrange games and the currency, etc. | . Procedural Abstraction | Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. | One specific way that this can be shown is in hi-lo. The game is called in the submenu and has an effect as one of the 4 created games to make the website function. | . Algorithm Implementation | Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. | Each of the games will have some sort of algorithm implemented | . Testing | Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. | Our Group will test two different features in each separate arcade game, these will test specific conditions and give different results. | . CPT . Each person in our group is creating their own specific game for the arcade, each members CPT will be focused on their respective game. This all will be incorporated into a larger project, which is the entire arcade itself. . Code Plan . User pays 2 coins to play | Every Guess the user is deducted 2 coins from 20, all the way until they guess the number | The user will keep the sum of what they end with wether that is less than 1o or over will decide their +/-. | The user will be brought to a play again/exit screen after each round. | . Video Plan . I will show the creation of my account and grant of tokens then play my specific game, I will then check my rank on the leaderboard | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/ProjectBlog",
            "relUrl": "/posts/ProjectBlog",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 5 Blog reflections",
            "content": "5.1 . Q1, Come up with three of your own Beneficial and corresponding Harmful Effects of Computing. . Benefits . Computers have enabled people to automate many tasks and processes, increasing efficiency and productivity. | Computers have facilitated instant communication and collaboration, connecting people from all over the world. | Computers allow for large amounts of data to be collected, processed, and analyzed, providing insights and informing decision-making. | . Harms . The collection and use of personal data can lead to privacy violations and the potential misuse of information. | The proliferation of fake news and misinformation on the internet can spread rapidly and negatively impact societies. | Harmful: Automation has led to job displacement, as some tasks can now be performed by machines instead of people. | . Q2, Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . There is evidence to suggest that certain technologies, such as social media, can affect dopamine levels and lead to addictive behavior. However, the relationship between technology and dopamine is complex and not fully understood. . | I can say that excessive use of technology can have negative impacts on student success in high school. This can include distractions from studying and sleep disturbances, as well as a decrease in face-to-face communication skills. As I have been affected by this before. . | . 5.2 . Q1, How does someone empower themself in a digital world? . Empowering oneself in a digital world involves taking control of one’s digital presence and maximizing its benefits while minimizing its risks. You can do this by; . Learning about digital literacy, online privacy, and the potential risks and benefits of technology. Stay informed about new developments and trends in the digital world. . | Acquire new skills that can help you in your personal and professional life, such as coding, data analysis, or digital marketing. . | Limit your screen time, disconnect from technology regularly, and engage in activities that promote well-being. . | etc. . | . Q2, How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . When someone is empowered, they have the knowledge, skills, and confidence to navigate and thrive in the digital world. To help someone who is not empowered, they can use their skills and resources to educate, support, and empower others. . | One thing you could do is Mentoring, offer to help someone with a specific digital skill or project, and share your knowledge and experience with them. . | . Q3, Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . Paper and red tape can sometimes act as barriers to digital empowerment, especially in situations where government or organizational policies and procedures are not aligned with the use of technology. These barriers can take the form of regulations, restrictions on access to technology, or the lack of resources and support for digital initiatives. . | At Del Norte Specifically these barriers can include outdated technology infrastructure, limited access to technology resources, and a lack of teacher training and support for digital learning; Elsewhere would probably have similar problems. . | . 5.3 Computer Bias . Notes . Computer Bias, only gives you 1 view as an AI, humans make mistakes and you need a broad view of topics. | . Q Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . Typically you would see an older audience using Facebook nowadays, as it is an older social media platform, specifically ages 30-50. | In Tiktok you would typically see ages 10-19 because it is a newer search engine and gives easy access to content and more enjoyable for the younger generation than you would see on Tiktok. | I do not believe that there is any purposeful exclusion in these platforms because the more people for the app te better for them, so I don’t see why this would be the case. I believe that it is more of a generational gap and more advanced media and isn’t harmful. | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . According to BBC.com, “you might find feminine synthesized voices to be more common than masculine ones. But why? It’s partly down to the fact that companies spent decades acquiring many more recordings of women’s voices than of men’s.” Personally I believe that the reason for the gathering of women’s voices is because they are softer and more smooth. . | This is probably purposeful but I don’t believe that it is harmful because at the end of the day it is an AI and there are features to switch the voices if desired. I don’t believe it needs to be corrected and to me it is good business. . | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . One specific algorithm that impacts almost everyone in the modern day would be Google. It is the most widely used search engine and people rely on it for obtaining information and doing research. Based on what this engine shows, people develop opinions on it. | . Hacks . Q1 Does the owner of the computer think this was intentional?, If yes or no, justify you conclusion. . Definitely not, he has a hint of sarcasm in his voice so you can tell hes joking. he probably understands that it was a problem with the face recognition software and not purposely implemented. | . How do you think this happened? . HP probably only tested white people or people with lighter skin tones, so they did not recognize that their software is racist. | . Is this harmful? Was it intended to be harmful or exclude? . This was not harmful, it was not supposed to work like this so exclude. | . Should it be corrected? . Most Definitely. Or else they are losing a large audience of buyers for their company. | . What would you or should you do to produce a better outcome? . Fix the software and refund people in exchange for their computer that they had already purchased. | . 5.4 CrowdSourcing . Notes . Q, We have all experienced Crowdsourcing by using external data through API’s, namely RapidAPI. This data has influenced how we code and shown possibilities in obtaining and analyzing data. Discuss APIs you have used. . The only API I have come utilized is RapidAPI which I used last trimester in my Create Performance Task. | . Q, We have all participated in code Crowdsourcing by using GitHub. Many of you have forked from the Teacher repository, or exchanged code with fellow students. Not only can we analyze GitHub code, but we can obtain profiles and history about the persons coding history. What is the biggest discovery you have found in GitHub? . In my opinion the greatest discovery I have found in github is forking a repository. this is a rather basic concept but It allows for me to create what I call a Test repository, this allows me to test my code without breaking the file. | . Q, Kaggle datasets for code and science exploration. The avenue of data points us youtube or netflix channels. Analyzing crowd data helps us make decisions. Exam top 10 to 20. Did you see anything interesting? . Im not sure | . Hacks . Q1, CompSci has 150 principles students. Describe a crowdsource idea and how you might initiate it in our environment? . I call my idea “Student Solutions to School Challenges.” The idea is to encourage students to come up with innovative and practical solutions to challenges faced in school, such as school safety, bullying, improving the school environment, etc; This crowdsource initiative can empower students to take an active role in improving Del Norte, while also developing critical skills such as problem-solving, collaboration, and leadership. . | We could do this by; Provide training and resources to help students understand the crowdsource process, including how to develop and present their ideas effectively, Then create an online platform where students can submit their ideas, comment, and vote on each other’s submissions. . | . Q2, What about Del Norte crowdsourcing? Could your final project be better with crowdsourcing? . This could be a possibility, with my project being an arcade we could implement a commenting system or create a discord to help provide feedback on the games/website. This would allow us to improve our project if open to a large audience which can be easily created through outsourcing our social media. | . 5.5 Legal and Ethical Concerns . License Communities, License Types Guide . Q1,When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . A1 . Software licenses and options are agreements between the software creator and the user that dictate how the software can be used, distributed, and modified. The most common types of software licenses MIT, GNU, Etc. With an MIT one must credit your work if they wish to look at it, for a GNU all you information is free to everyone. . | The difference is; The GNU GPL is explicit about the patent grant an author would be giving when the code (or derivative work) is distributed, the MIT license does not discuss patents. Moreover, the GPL license impacts derivative works, but the MIT license does not. . | . Q2, In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . A2 . Software licenses and options are agreements between the software creator and the user that dictate how the software can be used, distributed, and modified. . | Digital rights refer to the rights of individuals and companies to control the distribution and use of their digital content, including music, videos, software, and other digital media. This often involves the use of digital rights management (DRM) technologies to restrict unauthorized copying and sharing of the content. . | In terms of legal and ethical considerations, it is important to respect the terms of software licenses and to properly attribute the creators of digital content. Failure to do so can result in legal action and damage to one’s reputation. . | When it comes to personal analysis, it is important to consider one’s own values and beliefs when making decisions about software licenses and digital rights. Some may prioritize the freedom to modify and share software, while others may value the protection of intellectual property rights. . | . 5.6 Safe Computing . Q1, Describe PII you have seen on project in CompSci Principles. . A1; . Some Personal Identifiable Information that I have seen on github is names, birthdays, and grade. . Q2, What are your feelings about PII and your personal exposure? . A2; . It’s a little weird seeing that anyone can access personal information on me, but Im just not going to give them a reason to. . Q3, Describe good and bad passwords? What is another step that is used to assist in authentication. . A3; . A good Password is something that is long, contains numbers and special keys and is not related to you at all. Bad would be Vice. Another step that can be used in authentication is 2 factor authentication, maybe sending you an email. . Q4, Try to describe Symmetric and Asymmetric encryption. . A4; . Symmetric encryption, also known as shared secret encryption, uses the same key for both encryption and decryption. In other words, the sender and the recipient of the encrypted message both have access to the same secret key and use it to encrypt and decrypt the message. . | Asymmetric encryption, also known as public key encryption, uses two different keys for encryption and decryption: a public key, which is used for encryption, and a private key, which is used for decryption. The public key can be freely shared with anyone, but the private key must be kept secret. The recipient of the encrypted message uses their private key to decrypt the message, while the sender uses the recipient’s public key to encrypt it. . | . Q5, Provide an example of encryption we used in AWS deployment. . A5; . In AWS deployment we used SSl encryption. And this encryption uses Symmetric and asymetric encryption. . Q6, Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . A6; . I haven’t really “learned the hard way” to my knowledge. However just recently my brother got identity fraud from someone posing as our personal bank, he got $6,000 dollars taken from him. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/unit5_reflections",
            "relUrl": "/posts/unit5_reflections",
            "date": " • Jan 25, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Planning",
            "content": "Clublisting Database . Basic club info, Basically a database . Similar to what our leaderboard will be | . Signup . Regular signup sheet. | . Review Page . They have a review database where they add reviews and the reviews are then sent to the database and stored on the site. | . Model,View,Control Flow . Model = . View = the connection between the frontend and backend . Add a Game search potentially . Planner . Make a planner for the cpt to finish by the deadline | . ### .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/01/24/Planning.html",
            "relUrl": "/2023/01/24/Planning.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Database/Model, Backend, OOP, Python",
            "content": "Database and Table Terms . The foundations of database is defining one or more Tables. In Python, a database can be constructed using the foundations we learned in modeling a Class. . A &quot;Table&quot; is a Model/Schema within a Database. | A &quot;Table&quot; definition in Python/SQLAlchemy is manifested by defining a &quot;Class&quot; and &quot;Attributes&quot; in Python. | A Python Class can inherit database functionality from SQLAlchemy. This is a method Python developers use to turn a Class into a Table within a SQL Database. | Writing methods in the Class for Create, Read, Update, Delete (CRUD) is how a developer initiates database operations. | . Reference . SQLAlchemy | Python Backend with Flask, SQLite | Python Backend starting Controller | . Outline for Backend Model and Database . OOP modeling with SQLAlchemy enables CRUD operations. . Users Table Schema | Database Properties . | Initial Database Setup (call) . | Initial Database Setup (add records) . | OOP CRUD operations . | User Table Schema . The db.Model is inherited into the class User(db.model), Each db.Column is provided properties according to capabilities of SQL. See init.py for db object definition. . db = SQLAlchemy(app) . &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &quot;&quot;&quot; Key additions to User Class for Schema definition &quot;&quot;&quot; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # Defines a relationship between User record and Notes table, one-to-many (one user to many notes) posts = db.relationship(&quot;Post&quot;, cascade=&#39;all, delete&#39;, backref=&#39;users&#39;, lazy=True) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=date.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob . User Table CRUD operations . All these def&#39;s are methods of the User Class. . def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, &quot;posts&quot;: [post.read() for post in self.posts] } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Outline to understand Devops and Databases . DevOps and the SQLite database requires file management and configuring Python to work in local and deployment environment. . Volumes in Deployment | Database URI (deployment) . | Review Dockerfile . | Database URI (testing) . | Exclude/Ignore Testing Database . | Port and Host (testing) . | Run locally as you develop Select main.py file in VSCode and press Play button, or press down arrow next to Play button to activate Debug testing. The below dialog will appear in Terminal. . | (base) machine:flask_portfolio user$ cd /Users/user/vscode/flask_portfolio ; /usr/bin/env /Users/user/opt/anaconda3/bin/python /Users/user/.vscode/extensions/ms-python.python-2022.20.2/pythonFiles/lib/python/debugpy/adapter/../../debugpy/launcher 61127 -- /Users/user/vscode/flask_portfolio/main.py * Serving Flask app &quot;__init__&quot; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on all addresses. WARNING: This is a development server. Do not use it in a production deployment. * Running on http://192.168.1.75:8086/ (Press CTRL+C to quit) * Restarting with watchdog (fsevents) * Debugger is active! * Debugger PIN: 403-552-045 . Run with Docker prior to commit and deployment It is much simpler to debug Docker issues in VSCode prior to Deployment on AWS. This will create production database sample, which will show up commits. Simply delete file after run session, do not commit it. | (base) machine:flask_portfolio user$ pwd # verify directory /Users/user/vscode/flask_portfolio (base) machine:flask_portfolio user$ docker-compose build # run docker build [+] Building 16.0s (10/10) FINISHED =&gt; [internal] load build definition from Dockerfile 0.0s ... =&gt; [1/6] FROM docker.io/library/python:3.10@sha256:e9f824eec86879b1ffe8da9ef3eb4677dd6e89b63e8bce8cb35c572f550751d8 0.0s =&gt; CACHED [2/6] RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git 0.0s =&gt; [3/6] COPY . / 0.2s =&gt; [4/6] RUN pip install --no-cache-dir -r requirements.txt 9.7s =&gt; [5/6] RUN pip install ... =&gt; =&gt; writing image sha256:47ccd2a3ca839139727dd8c8f57fc1ad6a36e670962059d960d21b3ad0cba292 0.0s =&gt; =&gt; naming to docker.io/library/flask_port_v1 0.0s (base) machine:flask_portfolio user$ docker-compose up # enable for browser testing, no -d! This allows ctl-C to stop and all errors will appear in Terminal [+] Running 1/1 ⠿ Container flask_portfolio-web-1 Recreated 0.1s Attaching to flask_portfolio-web-1 flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [1] [INFO] Starting gunicorn 20.1.0 flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [1] [INFO] Listening at: http://0.0.0.0:8086 (1) flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [1] [INFO] Using worker: sync flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [7] [INFO] Booting worker with pid: 7 . docker-compose.yml has a volume mount. . Docker run in a container, its own virtual computer. Outside of the Docker container is where we desire to keep the SQLite database, thus there is a mount to a files accessible by developers. This ensures data is saved after Docker virtual computer up/down. The Left side of volume says ./volumes is a relative location on computer where docker-compose build/up was run, this is were database can always be seen. The Right side /volumes is where the Docker container see the volume. . version:&#39;3&#39;services: web: image: flask_port_v1 build: . ports: - &quot;8086:8086&quot; volumes: - ./volumes:/volumes restart: unless-stopped . init.py contains project settings. . This file contains app variables that can be referenced anywhere the app elements is imported (from __init__ import app, db). This is a way of sharing configuration across the many python/flask files in the project. Review the below file and become familiar with the settings ... . from flask import Flask from flask_login import LoginManager from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate &quot;&quot;&quot; These object can be used throughout project. 1.) Objects from this file can be included in many blueprints 2.) Isolating these object definitions avoids duplication and circular dependencies &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) dbURI = &#39;sqlite:////volumes/flask_portfolio.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = dbURI app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy(app) Migrate(app, db) # Images storage app.config[&#39;MAX_CONTENT_LENGTH&#39;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&#39;UPLOAD_EXTENSIONS&#39;] = [&#39;.jpg&#39;, &#39;.png&#39;, &#39;.gif&#39;] # supported file types app.config[&#39;UPLOAD_FOLDER&#39;] = &#39;volumes/uploads/&#39; # location of user uploaded content . Outline of SQL Administration Tools . Learning SQL basics using SQLite tools. . Install SQLite Viewer in VSCode marketplace, click on SQL database to review schema and see rows. . | Install SQLite and review SQLite Explorer. . | SQLite3 Website describes the command line SQL administration tool. To install on Mac terminal brew install sqlite3, on WSL terminal sudo apt install sqlite3. . | SQL Cheat Sheet. These commands can be done using SQLite3 and perhaps in Market Place tooling. | Loading SQLite3 from volumes directory . (base) machine:volumes user$ sqlite3 sqlite.db . Review content in users table . sqlite&gt; select id, _name, _uid, _dob from users; 1|Thomas Edison|toby|1847-02-11 2|Nicholas Tesla|niko|2023-01-14 3|Alexander Graham Bell|lex|2023-01-14 4|Eli Whitney|whit|2023-01-14 5|John Mortensen|jm1021|1959-10-21 6|Hedy Lamar|hedy|2023-01-14 7|Hedy Lamarr|heddy|2023-01-14 8|Marie Currie|marie|2023-01-14 9|Wilma Flintstone|wilma|2023-01-14 10|Fred Flintstone|fred|0010-01-01 . Delete content in users table, redisplay . sqlite&gt; delete from users where id=7; sqlite&gt; select id, _name, _uid, _dob from users; 1|Thomas Edison|toby|1847-02-11 2|Nicholas Tesla|niko|2023-01-14 3|Alexander Graham Bell|lex|2023-01-14 4|Eli Whitney|whit|2023-01-14 5|John Mortensen|jm1021|1959-10-21 6|Hedy Lamar|hedy|2023-01-14 8|Marie Currie|marie|2023-01-14 9|Wilma Flintstone|wilma|2023-01-14 10|Fred Flintstone|fred|0010-01-01 . Quit SQLite3 and return to prompt . sqlite&gt; .quit . SQLite Explorer . id _name _uid _password _dob . 1 | Thomas Edison | toby | sha256$Yj69CENuKWaRDHw3$dcb731d06dd59b7a316a853944b6603197876aa3a9553a758865d849a2b0a502 | 1847-02-11 | . 2 | Nicholas Tesla | niko | sha256$muQZzhqAFgXLERzC$cc7a02c80fc80190cd0b052d0dd010272cc8bc81971a7fe3cad6cee4a13e55e7 | 2023-01-14 | . 3 | Alexander Graham Bell | lex | sha256$rBKtyle2TI1vY7y9$ace54fb1e44640213f4aa284d6fe05cd27bfbcd1f7ac6d2ba697400d0b78cb7e | 2023-01-14 | . 4 | Eli Whitney | whit | sha256$j31DNBdcLtDALA4x$d39828e9e016c675b6c27ce1e6a08e196ffa5b7740978d6b313d039e60756375 | 2023-01-14 | . 5 | John Mortensen | jm1021 | sha256$5gt0IT2TiQm0UWi5$3d74775d35d2e2b0865deefb8f59e22e2b35d8c19ab4b1c26c7e50a27d3bf9fd | 1959-10-21 | . Hacks . The Big Picture purpose of this hack is to build a database. Being able to create an SQLite table and populate test data within it is the major goal. To do this effectively it is imperative to show the following. . Build Schema for a table, make a new model file and use users.py as an example. Start slow and simple and build up. | Build an initXXXXX() method and use it to add preliminary/test data to the table. Once again use users.py as an example. | Make a 30-60 second video where you show a Debugging session of making new rows in the table. Use sqlite marketplace tools and/or sqlite3 command line tool to show success in creating table and adding data. | Hack Helper . Here are some tips. . Become familiar with initUsers(). Observe it is called/activated from main.py. This function activates after you run the main.py and activate the web application in the browser. Observe that the sqlite.db file will appear in the volumes directory in conjunction with home screen of site appearing in browser. . | Delete sqlite.db from volumes directory on your development machine. Set breakpoint on initUsers() and run main.py using debug. Use the step into option on the debugger and observe the creation of data. . | . @app.before_first_request def activate_job():initJokes() initUsers() . Make your own XXXXX.py file under model directory. Follow users.py and develop your own schema from the OOP code you did in last Hacks. Follow the pattern in users.py to make a initXXXX() function top populate some test data. . | In main.py, add your initXXXX() method to def activate_job() function shown above. Use this as basis of your video debugging session. Debugging is hugely important at this level to understand your database success prior to building an API. Building initXXXX() method, adding database records, and debugging will enable you to verify CRUD operations as you develop. . | .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/01/17/PBL-database.html",
            "relUrl": "/2023/01/17/PBL-database.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, ClassOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._ClassOf = ClassOf # a name getter method, extracts name from object @property def ClassOf(self): return self._ClassOf @ClassOf.setter def ClassOf(self, ClassOf): self.ClassOf = ClassOf # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;, ClassOf: &quot;{self.ClassOf}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, ClassOf= &#39;1904&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;, ClassOf= &#39;1998&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, ClassOf= &#39;1992&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;, ClassOf= &#39;1976&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;, ClassOf= &#39;2001&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ovW...&#34;, ClassOf: &#34;1904&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$tOn...&#34;, ClassOf: &#34;1998&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$7DK...&#34;, ClassOf: &#34;1992&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$AKf...&#34;, ClassOf: &#34;1976&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$HCU...&#34;, ClassOf: &#34;2001&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ovW...&#34;, ClassOf: &#34;1904&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$tOn...&#34;, ClassOf: &#34;1998&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$EFF...&#34;, ClassOf: &#34;1992&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$AKf...&#34;, ClassOf: &#34;1976&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$HCU...&#34;, ClassOf: &#34;2001&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ovWATTdLQY9jFId4$7eeacbede0cff77b0f1267af05e690dacebfd2574aa41a7c24f488b4f0299994&#34;, &#34;_ClassOf&#34;: &#34;1904&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$tOnJQgABdpp4WsJ2$062453f5cce863fd0affa265a5cac8d8c8ffb93dc7a7257495f8243e80d6be7c&#34;, &#34;_ClassOf&#34;: &#34;1998&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$EFFfVL2d6l6addoc$a8c97b97b12454aeef9a7593c78c95668d54dc1ed76b13e172b59b2c22b34bdd&#34;, &#34;_ClassOf&#34;: &#34;1992&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$AKfpsyqeYetvVblr$0a0c079415ef112c9ff56c5f75217f396a3ae7c0596af880ffd73ad2fe0bdec2&#34;, &#34;_ClassOf&#34;: &#34;1976&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$HCUrPYQBkbJsnnO9$3975598ff972fe8c12988539fe524d86c0aeedc9ab1a80f1218d99b554c55b48&#34;, &#34;_ClassOf&#34;: &#34;2001&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ovWATTdLQY9jFId4$7eeacbede0cff77b0f1267af05e690dacebfd2574aa41a7c24f488b4f0299994&#34;, &#34;_ClassOf&#34;: &#34;1904&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$tOnJQgABdpp4WsJ2$062453f5cce863fd0affa265a5cac8d8c8ffb93dc7a7257495f8243e80d6be7c&#34;, &#34;_ClassOf&#34;: &#34;1998&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$EFFfVL2d6l6addoc$a8c97b97b12454aeef9a7593c78c95668d54dc1ed76b13e172b59b2c22b34bdd&#34;, &#34;_ClassOf&#34;: &#34;1992&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$AKfpsyqeYetvVblr$0a0c079415ef112c9ff56c5f75217f396a3ae7c0596af880ffd73ad2fe0bdec2&#34;, &#34;_ClassOf&#34;: &#34;1976&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$HCUrPYQBkbJsnnO9$3975598ff972fe8c12988539fe524d86c0aeedc9ab1a80f1218d99b554c55b48&#34;, &#34;_ClassOf&#34;: &#34;2001&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) . 18 . Hack Helps Complete, Hack. . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def classOf(self): return self._classOf # a setter function, allows classOf to be updated after initial object creation @classOf.setter def name(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&#39;1865&#39;) u2 = User(name=&#39;Josh W&#39;, uid=&#39;Jwilli&#39;, password=&#39;jwill21&#39;, dob=date(2006, 1, 6), classOf=&#39;2024&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u2, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u2), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u2), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u2), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;1865&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$78mwytpR6Xcw936F$721cded5bb12f4f49d7dba2fe556750b958471f3c7a0a16a7a7d56f58725db05&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: &#39;1865&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$78mwytpR6Xcw936F$721cded5bb12f4f49d7dba2fe556750b958471f3c7a0a16a7a7d56f58725db05,dob=1847-02-11) JSON ready string: {&#34;name&#34;: &#34;2024&#34;, &#34;uid&#34;: &#34;Jwilli&#34;, &#34;dob&#34;: &#34;01-06-2006&#34;, &#34;age&#34;: 17} Raw Variables of object: {&#39;_name&#39;: &#39;Josh W&#39;, &#39;_uid&#39;: &#39;Jwilli&#39;, &#39;_password&#39;: &#39;sha256$WFC6Rhp6ghwp9IR2$03800efeec2fcae1a2128a473110e9fc73551e2e6ebd6874dfb707080ede23eb&#39;, &#39;_dob&#39;: datetime.date(2006, 1, 6), &#39;_classOf&#39;: &#39;2024&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Josh W, uid=Jwilli, password=sha256$WFC6Rhp6ghwp9IR2$03800efeec2fcae1a2128a473110e9fc73551e2e6ebd6874dfb707080ede23eb,dob=2006-01-06) .",
            "url": "https://joshuaw03628.github.io/Repository-1/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Pre Tree Grades",
            "content": "Submission 1 . DISCLAIMER : EVERY ASPECT IN EACH ROW SHOULD BE CHECKED OFF IF NOT ITS AN AUTOMATIC 0 FOR THAT ROW OF THE CPT!!! . 1 point - Program Purpose and Function (Row 1) | Video should demonstrate the following running aspects of the program; | Input | Program Functionality | Output | Written Response for this row should include these descriptions; | Describes the overall purpose of the program | Describes what functionality of the program is demonstrated in the video. | [x] Describes the input and output of the program demonstrated in the video. . | 1 Point - Data Abstraction (Row 2) | The written piece on this row should include two program code segments; | one that shows how data has been stored in this list (or other collection type). | one that shows the data in this same list being used as part of fulfilling the program’s purpose. | It must also; | identifies the name of the variable representing the list being used in this response. . | describes what the data contained in this list is representing in the program. | . . 1 point - Managing Complexity (Row 3) | The written response must include; | a program code segment that shows a listComplexity being used to manage complexity in the program. . | explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . . 1 point - Procedural Abstraction (Row 4) | The written response must include; | two program code segments; | Abstraction - one showing a student-developed procedure Requirements for program code segments with at least one parameter that has an effect on the functionality of the procedure. . | one showing where the student-developed procedure is being called. | Must also; | describes what the identified procedure does and how it contributes to the overall functionality of the program. ————————————————————————————- | 1 point - Algorithm Implementation (Row 5) | The written response must include; | includes a program code segment of a student- Implementation developed algorithm that includes; | sequencing | selection | iteration | also; | explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. ——————————————————————————– | 1 point - Testing (Row 6) | describes two calls to the selected procedure identified in written response each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | describes the condition(s) being tested by each call to the procedure. | identifies the result of each call. | . Comments . This gives them an overall grade of 3/6. This student did very well in many categories however just one miss in any colum can cost you and besides the managing complexity piece he just had singular pieces missing costing him 2 points. . Submission 2 . DISCLAIMER : EVERY ASPECT IN EACH ROW SHOULD BE CHECKED OFF IF NOT ITS AN AUTOMATIC 0 FOR THAT ROW OF THE CPT!!! . 1 point - Program Purpose and Function (Row 1) | Video should demonstrate the following running aspects of the program; | Input | Program Functionality | Output | Written Response for this row should include these descriptions; | Describes the overall purpose of the program | Describes what functionality of the program is demonstrated in the video. | Describes the input and output of the program demonstrated in the video. ———————————————————————————– | 1 Point - Data Abstraction (Row 2) | The written piece on this row should include two program code segments; | one that shows how data has been stored in this list (or other collection type). | one that shows the data in this same list being used as part of fulfilling the program’s purpose. | It must also; | identifies the name of the variable representing the list being used in this response. | [x] describes what the data contained in this list is representing in the program. . | 1 point - Managing Complexity (Row 3) | The written response must include; | a program code segment that shows a listComplexity being used to manage complexity in the program. | [x] explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. . | 1 point - Procedural Abstraction (Row 4) | The written response must include; | two program code segments; | Abstraction - one showing a student-developed procedure Requirements for program code segments with at least one parameter that has an effect on the functionality of the procedure. | one showing where the student-developed procedure is being called. | Must also; | describes what the identified procedure does and how it contributes to the overall functionality of the program. ————————————————————————————- | 1 point - Algorithm Implementation (Row 5) | The written response must include; | includes a program code segment of a student- Implementation developed algorithm that includes; | sequencing | selection | iteration | also; | explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. ——————————————————————————– | 1 point - Testing (Row 6) | describes two calls to the selected procedure identified in written response each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | describes the condition(s) being tested by each call to the procedure. | identifies the result of each call. | . Comments . Honestly nothing wrong with the project it was organized and clearly well thought out giving them a perfect score. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/Pre-Tree-Grades",
            "relUrl": "/posts/Pre-Tree-Grades",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Pre Tree Vocab",
            "content": "Unit 2 Vocab . Bits . are the basic units of information in computing. They are typically represented as either 0 or 1, and can be combined to represent larger numbers and other types of data. For example, the number 101010 in binary is equivalent to the decimal number 42. . Bytes . are a unit of measurement for digital information, typically consisting of 8 bits. For example, a single character in the ASCII character set can be represented using one byte. . Hexadecimal (also known as hex) . is a numeral system that uses base 16 instead of base 10 like the decimal system. This means that instead of using the digits 0-9, hexadecimal uses the digits 0-9 and the letters A-F to represent numbers. Each digit in a hexadecimal number is called a &quot;nibble&quot;, which is half of a byte. For example, the hexadecimal number 3F is equivalent to the decimal number 63. . Unsigned integer . is a type of binary number that represents a non-negative whole number. It is called &quot;unsigned&quot; because it doesn&#39;t have a sign (+ or -) to indicate whether the number is positive or negative. For example, the number 101010 in binary is an unsigned integer. . Signed integer . is a type of binary number that can represent both positive and negative numbers. It has a sign (+ or -) to indicate the sign of the number. For example, the number -42 in binary would be represented using a signed integer. . Floating point numbers . are a type of binary number that can represent fractional values. They are typically used to represent numbers that have a decimal point, such as 3.14 or -2.71828. . Boolean data . is a type of binary data that can only have two possible values: true or false. This data type is often used in programming languages to represent logical values or conditions. For example, a variable with a boolean value of true might represent that a certain condition is met, while a value of false might represent the opposite. . ASCII (American Standard Code for Information Interchange) . is a character encoding standard that represents text using a set of 128 basic characters, including letters, numbers, and punctuation marks. For example, the ASCII code for the letter &quot;A&quot; is 65. . Unicode . is a character encoding standard that extends ASCII by providing a wider range of characters, including those from different languages and symbols. For example, the Unicode code for the Greek letter &quot;Δ&quot; (delta) is U+0394. . RGB (Red-Green-Blue) . is a color model that represents colors using a combination of red, green, and blue light. Each color is represented by a value between 0 and 255, with 0 representing the absence of that color and 255 representing the maximum amount of that color. For example, the RGB value 255,0,0 represents the color red, while the value 0,255,0 represents the color green. . Lossy data compression . is a type of data compression that reduces the size of a file by removing some of the data from the original file. This can result in a loss of quality in the compressed file, but can also achieve a much greater level of compression than lossless methods. For example, a lossy image compression algorithm might remove some of the fine details from an image in order to achieve a higher level of compression. . Lossless data compression . is a type of data compression that reduces the size of a file without losing any of the data from the original file. This means that when the file is decompressed, it will be exactly the same as the original. Lossless data compression is often used for text files, audio files, and other types of data where it is important to preserve the integrity of the original information. . Unit 3 Vocab . Variables . are named storage locations in a computer&#39;s memory that can hold different values at different times. In programming, variables are used to store data values that can be changed or used in various operations. . Data types . are the classification of different types of data that a variable can hold. Examples of data types include integers, floating-point numbers, characters, strings, and Boolean values (true or false). . Assignment operators . are used in programming to assign a value to a variable. For example, the equal sign (=) is used as an assignment operator in the following statement: x = 5, which assigns the value 5 to the variable x. . Lists, 2D lists, and dictionaries . are data structures used to manage complexity in programs by allowing for the storage and organization of multiple values in a single variable. . Algorithms are sets of step-by-step instructions for solving a problem or completing a task. . Sequence, selection, and iteration . are the three fundamental control structures used in programming to control the flow of execution of a program. . Expressions . are combinations of variables, values, and operators that produce a result when evaluated. . Comparison operators . are used to compare values in programming. They include equals (==), not equals (!=), greater than (&gt;), less than (&lt;), greater than or equal to (&gt;=), and less than or equal to (&lt;=). . Boolean expressions . are expressions that evaluate to either true or false. They are often used in selection and iteration control structures to control the flow of execution of a program. . Truth tables . are used to represent the possible combinations of true and false values for a given Boolean expression. . Characters and strings . are data types used to represent text in programming. A character is a single letter, number, or symbol, while a string is a sequence of characters. . Concatenation . is the operation of combining two or more strings into a single string. . Upper and lower . are string methods that convert all the characters in a string to uppercase or lowercase, respectively. . Traversing a string . means to access each character in the string one at a time. This is often done using a loop. . Python&#39;s if, elif, and else conditionals . are used to control the flow of execution of a program based on the evaluation of Boolean expressions. . Nested selection statements . are if, elif, and else statements that are placed within the body of another if, elif, or else statement. . Python&#39;s for and while loops . are used to repeat a block of code multiple times. The for loop is used to iterate over a sequence of values, while the while loop is used to repeat a block of code until a certain condition is met. . Python&#39;s for and while loops . are used to repeat a block of code multiple times. The for loop is used to iterate over a sequence of values, while the while loop is used to repeat a block of code until a certain condition is met. . Combining loops with conditionals . allows for more complex control over the flow of execution of a program. The break and continue statements can be used within loops to control when the loop should stop executing or skip to the next iteration. . Procedural abstraction . is the process of separating a large, complex problem into smaller, more manageable subproblems. In programming, this is often achieved using procedures, which are named blocks of code that can be called upon to perform a specific task. . In Python, . procedures are defined using the def keyword, followed by the name of the procedure and any parameters that the procedure takes. . def greet(name): print(&quot;Hello, &quot; + name) . Parameters . are the variables that are used to pass information into a procedure. In the example above, the name parameter is used to pass in the name of the person that the procedure should greet. . Return values . are the values that a procedure returns to the caller when it is finished executing. . def add(x, y): result = x + y return result .",
            "url": "https://joshuaw03628.github.io/Repository-1/pre-tree/2022/12/15/PreTreeVocap.html",
            "relUrl": "/pre-tree/2022/12/15/PreTreeVocap.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . fahrenheit=int(input(&quot;what is the temperature outside&quot;)) def convertFahrenheit(): celsius = fahrenheit - 32 celsius = celsius * 5/9 convertFahrenheit(fahrenheit) . TypeError Traceback (most recent call last) /Users/josh/Repository-1/2022-12-07-developing-procedures.ipynb Cell 3 in &lt;cell line: 6&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/josh/Repository-1/2022-12-07-developing-procedures.ipynb#W2sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; celsius = fahrenheit - 32 &lt;a href=&#39;vscode-notebook-cell:/Users/josh/Repository-1/2022-12-07-developing-procedures.ipynb#W2sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; celsius = celsius * 5/9 -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/josh/Repository-1/2022-12-07-developing-procedures.ipynb#W2sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; convertFahrenheit(fahrenheit) TypeError: convertFahrenheit() takes 0 positional arguments but 1 was given . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . currentPoints = int(input(&quot;what score did you get on your retake?&quot;)) quizGrade = int(input(&quot;what score did you get on your first quiz?&quot;)) Total = int(input(&quot;what was the test out of&quot;)) quizGrade = quizGrade / Total quizGrade = quizGrade * 100 currentGrade = currentPoints / Total currentGrade = currentGrade * 100 if currentGrade &gt; quizGrade: quizGrade = currentGrade print(round(quizGrade)) . 83 . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a pre-written procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . Score = int(input(&quot;How many points did you earn&quot;)) Total = int(input(&quot;what was the highest points someone earned on the quiz out of the whole class?&quot;)) def curverCalculator(Score, Total): Score = Score / Total Score = Score * 100 print(&quot;Your new percentage is &quot; + str(round(Score)) + &quot;%&quot;) curverCalculator(Score, Total) Score = (Score / Total) *100 if Score &lt;= 59: print(&quot;you failed&quot;) else: if (Score &gt;=60) and (Score &lt; 70): print(&quot;you got a D&quot;) else: if (Score &gt;=71) and (Score &lt; 80): print(&quot;you got a C&quot;) else: if (Score &gt;=81) and (Score &lt; 90): print(&quot;you got a B&quot;) else: if (Score &gt;=91) and (Score &lt;= 100): print(&quot;you got a A&quot;) . Your new percentage is 76% you got a C . .",
            "url": "https://joshuaw03628.github.io/Repository-1/lessons/2022/12/07/developing-procedures.html",
            "relUrl": "/lessons/2022/12/07/developing-procedures.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Pre Tree Grades",
            "content": "Pre Tree Week 1 Grades . 3.1 &amp; 3.2 3.3 and 3.4 Total . 1/1 | 0.95/1 | 1.95/2 | . Pre Tree Week 2 Grades . 3.5 &amp; 3.7 3.8 and 3.10 Total . 0.9/1 | 0.9/1 | 1.8/2 | . Pre Tree Week 3 Grades . 3.12/13 3.14 and 3.15 Total . 0.95/1 | 0.85/1 | 1.8/2 | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/Pre-Tree-Grades",
            "relUrl": "/posts/Pre-Tree-Grades",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Pre tree",
            "content": "Lesson 3.1/2 Variables Assignments and Data Abstraction . What is a variable . A variable is an abstraction inside a program that can hold a value . | It organizes data by labeling it with a descriptive name . | It consists of three parts: name, value, and type . | Using meaningful variables names helps with readability of program code and understanding of what values are represented by the variables . | . Naming Variables . Keep the name simple but not too vague | proper syntax, no spaces | . Types of data . Integer; A number | Text/String; A word | Boolean; Data that determines if something is true or false | . What is Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren’t being used in the situation . | Variables and lists are primary tools in data abstraction . | Provides a separation between the abstract properties of a data type and the concrete details of its representation . | . Lists and Strings . List = ordered sequence of elements. . | Element = individual value in a list that is assigned to a unique index. | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index. | String = ordered sequence of characters (Letters, numbers, special characters). | . * AP Exam usage of Data Abstraction . With the properties of the AP Exam pseudocode, lists work differently from what we’ve learned in python so far, here are the two major differences: . The index does not start at 0 but 1 | There is only one method of interchanging data between lists, and that is completely overwriting previous list data with the other list n”, | . 3.3/4 Lesson . Algorithms . Algorithms has 3 components . Sequencing: Algorithms do tasks in the order of specification. | Selection: Helps choose two different outcomes based off a decision. | Iteration: If a condition is true, then the code can repeat. | . | Algorithms can be represented in two ways . Flowcharts or Psuedocode. | . | . Arithmetic Operations . Basic | . Subtraction: Represented by “-“ num1 = 2 - 1 . Addition: Represented by “+” num1 = 2 + 1 . Multiplication: Represented by “*” num1 = 2 * 1 . Division: Represented by “/” num1 = 2 / 1 . Getting the Remainder: Represented by “MOD” (% in python) num1 = 5 % 2 . Order of Operations | . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Variables . Different ways values can be stored in a variable Numerical value stored in a variable | Value of another variable stored in a variable | Result of an operation stored in a variable | . | . Sequence . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . String . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples; . len() to find the length of a string . | lower() to convert to lowercase . | . Pseudocode examples; . len() returns the length of a string . | concat() returns a string made up of the concatenated strings ex. concat(“string1”, “string2”) would return string1string2 . | substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (“abcdefghijk”, 2, 5) would print bcde (pseudocode starts at 1) . | SubString . | . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(“Mr.Mortenson is very handsome” 1, 2) the system would return Mr (remember that pseudocode starts at 1) | . Lesson 3.5 - 3.7 . What is a Boolean . A data type with two possible values: true or false | . What is the Difference between a Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Logical Operators . These types of operators don’t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Conditionals . Selection: uses a condition that evaluates to true or false . | Selection determines which part of an algorithm are executed based on a condition being true or false . | Algorithm is a finite set of instructions that accomplish a specific task . | . CONDITIONAL STATEMENTS . also known as if statements, and also else. | . Nested Conditionals . If else statements within if else statement | . Lesson 3.8/3.10 . What is a list . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn’t allow duplicates | Dictionary: collection that is ordered, changeable, doesn’t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | fruits.append(“watermelon”) | . index() | returns the index of the first element with the specified value | fruits.index(“apple”) | . insert() | adds element at given position | fruits.insert(1, “watermelon”) | . remove() | removes the first item with the specified value | fruits.remove(“strawberry”) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(“apple”) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . What is Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There’s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a “for loop”, using a “for loop and range()”, using a “while loop”, and using comprehension . Usage . Lists, tuples, dictionaries, and sets are iterable objects. They are the ‘containers’ that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration: definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | . Too time consuming? . use the range function x=range( ) | . 2D Arrays . a list of lists, literally | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/Pre-Tree-Notes",
            "relUrl": "/posts/Pre-Tree-Notes",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Pre Tree Homework",
            "content": "3.1/2 . question = [] # creates empty list question.append({ # adds dictionary with question and answer to list using .append &quot;Question&quot;: &quot;What&#39;s the best game ever&quot;, &quot;Answer&quot;: &quot;Fortnite&quot;, }) question.append({ &quot;Question&quot;: &quot;Who is the best Fortnite player&quot;, &quot;Answer&quot;: &quot;Ninja&quot;, }) question.append({ &quot;Question&quot;: &quot;Whats the Fortnite mascot&quot;, &quot;Answer&quot;: &quot;A Llama&quot;, }) question.append({ &quot;Question&quot;: &quot;What season did Josh Start Fortnite&quot;, &quot;Answer&quot;: &quot;0&quot;, }) points = 0 # resets point count print(&quot;Take this quiz about Fortnite.&quot;) for i in question: # for loop repeats every time an answer is given print(i[&quot;Question&quot;]) response = input(i[&quot;Question&quot;]) print(response) if response == i[&quot;Answer&quot;]: points += 1 print(&quot;Correct, you have &quot;, points, &quot; points!&quot;) else: print(&quot;Incorrect, the answer was; &quot;, i[&quot;Answer&quot;]) print(&quot;You have finished the quiz with &quot;, points, &quot; out of &quot;, len(question), &quot; points!&quot;) . Take this quiz about Fortnite. What&#39;s the best game ever Fortnite Correct, you have 1 points! Who is the best Fortnite player Ninja Correct, you have 2 points! Whats the Fortnite mascot camel Incorrect, the answer was; A Llama What season did Josh Start Fortnite 0 Correct, you have 3 points! You have finished the quiz with 3 out of 4 points! . 3.3/4 . Num1 = 50 # 50/9 = 5 Remainder 5 take remainder 5 and + 15 = 20 Num2 = Num1 % 9 + 15 # #3 = 20/50 + 40 = 40.4 Num3 = Num2 / Num1 + ( Num2 * 2 ) # #4 = 40.4 + 50 / 5 . 90.4/5 - 10 = 40.4 Num4 = Num3 + Num1 / 5 - 10 # 40.4 - 20 = 20.4 Result = Num4 - Num2 print(Result) . 20.4 . Num1 = 10 # 10/3 = 3 R 1 - 1 * 4 = 4 Num2 = Num1 % 3 * 4 # num 1 = 4 Num1 = Num2 # num 3 = 4*3 = 12 Num3 = Num1 * 3 # Result = 12/2 -- 6 R 0 -- = 0 Result = Num3 % 2 print(Result) . 0 . valueA = 4 valueB = 90 valueC = 17 # Value B = 17 - 4 = 13 valueB = valueC - valueA # Val A = 4 * 10 = 40 valueA = valueA * 10 # Value b = 13, 13&gt;10 - Value C = 17 if valueB &gt; 10: print(valueC) . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; # switches type to straight hair since it comes later, code goes from top to bottom, # if i switched it to curly it would be curlybrownshort. type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . Noun = &quot;Mr.Mort&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Super&quot; Verb = &quot;is&quot; abrev = Noun[0:7] yoda = abrev + &quot; &quot; + Verb + &quot; &quot; + Adjective2 + &quot; &quot; + &quot; &quot; + Adjective + &quot;.&quot; print(yoda) . Mr.Mort is Super handsome. . cookie = &quot;chocolate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 # Calculated len2 = len(cookie2) * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = &quot;cookie has &quot; + str(len1) + &quot; and the second cookie has &quot; + str(len2) print(votes) . cookie has 4.5 and the second cookie has 225 . Key . Noun = &quot;Mr.Mort&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[:7] yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; print(yoda) . Very handsome Mr.Mort is. . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = (str(cookie) + &quot; vote &quot; + str(len2)) vote2 = (str(cookie2) + &quot; vote &quot; + str(len1)) votes = (str(vote1) + &quot; &quot; + str(vote2)) print(votes) . choclate vote 225 rasin vote 4.0 . 3.5-3.7 Homework . product = 25 expired = 1 if (expired&gt;3) { console.log(&quot;this product is no good&quot;) } else { if (product &gt; 50 ) { console.log (&quot;this product is too expensive&quot;) } else { if (product &gt;= 25) { console.log (&quot;this is a regular product&quot;) } else { if (product &lt; 25) console.log (&quot;this is a cheap product&quot;) } } } . this is a regular product . quiz = {&quot;Who the 1st president of the U.S.?&quot;:[&quot;a. George Washington&quot;,&quot;b. John Mortensen&quot;, &quot;c. Thomas Jefferson&quot;, &quot;d. Abraham Lincoln&quot;], &quot;Who on the Civil War?&quot;:[&quot;a. The Union&quot;, &quot;b. The Confederacy&quot;,&quot;c. The Cornnuts&quot;, &quot;d. Ballerz&quot;] , &quot;What President signed the Emancipation Proclemation?&quot;:[&quot;a. George Washington&quot;,&quot;b. Thomas Jefferson&quot;, &quot;c. Abraham Lincoln&quot;, &quot;d. Mr.Mort&quot;], &quot;Who&#39;s the Best Team?&quot;:[&quot;a. TripleAJ&quot;,&quot;b. Lakers&quot;, &quot;c. Celtics&quot;, &quot;d. OKC&quot;]} # for the answers, used the question as the key and the multiple choice letter as the value answers = {&quot;Who the 1st president of the U.S.?&quot;:&quot;a&quot;, &quot;Who on the Civil War?&quot;:&quot;a&quot;, &quot;What President signed the Emancipation Proclemation?&quot;:&quot;c&quot;, &quot;Who&#39;s the Best Team?&quot;:&quot;b&quot;} count = 0 # iterating through the dictonary&#39;s keys and values for k,v in quiz.items(): # printing the key and it&#39;s values print(k) print(*v, sep = &#39; n&#39;) # taking the user input for the answer, entering ab user_input = input(&quot;Enter Your Answer&quot;) # comparing that with the answer&#39;s value if(answers.get(k)==user_input): # incrementing the count count = count +1 # printing the user&#39;s score print(&#39;You got&#39;, count, &#39;correct answers&#39;) . Who the 1st president of the U.S.? a. George Washington b. John Mortensen c. Thomas Jefferson d. Abraham Lincoln Who on the Civil War? a. The Union b. The Confederacy c. The Cornnuts d. Ballerz What President signed the Emancipation Proclemation? a. George Washington b. Thomas Jefferson c. Abraham Lincoln d. Mr.Mort Who&#39;s the Best Team? a. TripleAJ b. Lakers c. Celtics d. OKC You got 2 correct answers . HW 3.8/3.10 . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix3(matrix): for row in matrix: print(*row) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() lengthInp = len(inp) wordStart = [] for x in range(len(words)): wordLetter = words[x] wordThing = wordLetter[0] wordStart.append(wordThing) print(inp) for i in range(lengthInp): j = str(inp)[i] for y in range(len(wordStart)): if j == str(wordStart[y]): print(words[y]) . mort mike oscar romeo tango . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;, &quot; &quot;]] . def print_type(matrix): inp = input().upper() for i in range(len(inp)): j = str(inp)[i] for row in range(len(matrix)): # Iterates through each &quot;row&quot; of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it&#39;s own list. in this syntax the list is stored in &quot;row&quot;. for col in range(len(matrix[row])): if j == str(matrix[row][col]): # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in coif j == str(keyword[y]): print(matrix[row][col], end=&quot;&quot;) # Same as 1 # Same as 1 print_type(keyboard) . I LOVE FORTNITE . 3.12/13 . Score = int(input(&quot;How many points did you earn&quot;)) Total = int(input(&quot;what was the highest points someone earned on the quiz out of the whole class?&quot;)) def curverCalculator(Score, Total): Score = Score / Total Score = Score * 100 print(&quot;Your new percentage is &quot; + str(round(Score)) + &quot;%&quot;) curverCalculator(Score, Total) Score = (Score / Total) *100 if Score &lt;= 59: print(&quot;you failed&quot;) else: if (Score &gt;=60) and (Score &lt; 70): print(&quot;you got a D&quot;) else: if (Score &gt;=71) and (Score &lt; 80): print(&quot;you got a C&quot;) else: if (Score &gt;=81) and (Score &lt; 90): print(&quot;you got a B&quot;) else: if (Score &gt;=91) and (Score &lt;= 100): print(&quot;you got a A&quot;) . 3.14/15 HW . import random def generate_random_numbers(n): numbers = [random.randint(1, 100) for i in range(n)] even_numbers = [num for num in numbers if num % 2 == 0] odd_numbers = [num for num in numbers if num % 2 != 0] return even_numbers, odd_numbers even_numbers, odd_numbers = generate_random_numbers(10) print(&quot;Even numbers: &quot;, even_numbers) print(&quot;Odd numbers: &quot;, odd_numbers) . Even numbers: [8, 22, 86, 54, 36, 94] Odd numbers: [67, 11, 39, 91] . import numpy as np zac = np.poly1d([2, 0, -6, 0, 24, 0]) bru = p.deriv() print(&quot;The derivative of 2x^5 - 6x^2 + 24x =&quot;) print(bru) print() . The derivative of 2x^5 - 6x^2 + 24x = 5 4 3 6 x - 85 x + 208 x . print() # Create a poly1d object for the polynomial (13x^4 + 4x^2) / 2 p = np.poly1d([13, 0, 0, 4, 0, 0], True) # Evaluate the polynomial at x = 9 using the __call__ method p9 = p(9) # Compute the derivative of the polynomial using the deriv method dp = p.deriv() # Print the result print(f&quot;The derivative of (13x^4 + 4x^2) / 2 when x = 9 is {dp(9)}&quot;) . The derivative of (13x^4 + 4x^2) / 2 when x = 9 is -51759.0 . import random # create a list of dogs and cats animals = [&quot;dog&quot;] * 10 + [&quot;cat&quot;] * 10 # shuffle the list to create a random order random.shuffle(animals) # print the random order print(&quot;Random order: &quot;, animals) . Random order: [&#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;] . 3.16 Simulations in the Wild HW . import random # initial number of rabbits num_rabbits = 1 # probability of a rabbit giving birth at each time step birth_probability = 0.1 # number of time steps to simulate num_steps = 100 # simulate the growth of the rabbit population for i in range(num_steps): # compute the number of new rabbits born at this time step num_new_rabbits = 0 for j in range(num_rabbits): if random.random() &lt; birth_probability: num_new_rabbits += 1 # add the new rabbits to the population num_rabbits += num_new_rabbits # print the current population size print(&quot;At time step %d, there are %d rabbits&quot; % (i, num_rabbits)) . At time step 0, there are 2 rabbits At time step 1, there are 2 rabbits At time step 2, there are 2 rabbits At time step 3, there are 3 rabbits At time step 4, there are 3 rabbits At time step 5, there are 3 rabbits At time step 6, there are 3 rabbits At time step 7, there are 3 rabbits At time step 8, there are 3 rabbits At time step 9, there are 3 rabbits At time step 10, there are 4 rabbits At time step 11, there are 5 rabbits At time step 12, there are 5 rabbits At time step 13, there are 6 rabbits At time step 14, there are 6 rabbits At time step 15, there are 8 rabbits At time step 16, there are 9 rabbits At time step 17, there are 10 rabbits At time step 18, there are 11 rabbits At time step 19, there are 11 rabbits At time step 20, there are 11 rabbits At time step 21, there are 11 rabbits At time step 22, there are 11 rabbits At time step 23, there are 11 rabbits At time step 24, there are 12 rabbits At time step 25, there are 12 rabbits At time step 26, there are 13 rabbits At time step 27, there are 14 rabbits At time step 28, there are 15 rabbits At time step 29, there are 16 rabbits At time step 30, there are 17 rabbits At time step 31, there are 19 rabbits At time step 32, there are 23 rabbits At time step 33, there are 28 rabbits At time step 34, there are 31 rabbits At time step 35, there are 34 rabbits At time step 36, there are 36 rabbits At time step 37, there are 40 rabbits At time step 38, there are 43 rabbits At time step 39, there are 45 rabbits At time step 40, there are 48 rabbits At time step 41, there are 53 rabbits At time step 42, there are 60 rabbits At time step 43, there are 68 rabbits At time step 44, there are 74 rabbits At time step 45, there are 78 rabbits At time step 46, there are 85 rabbits At time step 47, there are 92 rabbits At time step 48, there are 102 rabbits At time step 49, there are 114 rabbits At time step 50, there are 131 rabbits At time step 51, there are 145 rabbits At time step 52, there are 162 rabbits At time step 53, there are 174 rabbits At time step 54, there are 188 rabbits At time step 55, there are 206 rabbits At time step 56, there are 228 rabbits At time step 57, there are 241 rabbits At time step 58, there are 272 rabbits At time step 59, there are 290 rabbits At time step 60, there are 326 rabbits At time step 61, there are 360 rabbits At time step 62, there are 392 rabbits At time step 63, there are 428 rabbits At time step 64, there are 476 rabbits At time step 65, there are 512 rabbits At time step 66, there are 578 rabbits At time step 67, there are 641 rabbits At time step 68, there are 697 rabbits At time step 69, there are 760 rabbits At time step 70, there are 836 rabbits At time step 71, there are 927 rabbits At time step 72, there are 1022 rabbits At time step 73, there are 1106 rabbits At time step 74, there are 1228 rabbits At time step 75, there are 1347 rabbits At time step 76, there are 1491 rabbits At time step 77, there are 1642 rabbits At time step 78, there are 1805 rabbits At time step 79, there are 2005 rabbits At time step 80, there are 2226 rabbits At time step 81, there are 2490 rabbits At time step 82, there are 2740 rabbits At time step 83, there are 3014 rabbits At time step 84, there are 3330 rabbits At time step 85, there are 3632 rabbits At time step 86, there are 3978 rabbits At time step 87, there are 4359 rabbits At time step 88, there are 4773 rabbits At time step 89, there are 5237 rabbits At time step 90, there are 5766 rabbits At time step 91, there are 6336 rabbits At time step 92, there are 7000 rabbits At time step 93, there are 7713 rabbits At time step 94, there are 8515 rabbits At time step 95, there are 9391 rabbits At time step 96, there are 10307 rabbits At time step 97, there are 11289 rabbits At time step 98, there are 12454 rabbits At time step 99, there are 13647 rabbits .",
            "url": "https://joshuaw03628.github.io/Repository-1/notebooks/Pre-Tree-Hw",
            "relUrl": "/notebooks/Pre-Tree-Hw",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "TESTING KERNELS",
            "content": "print(&quot;hello world&quot;) . hello world .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/11/18/PythonTest.html",
            "relUrl": "/posts/2022/11/18/PythonTest.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "TESTING KERNELS",
            "content": "console.log(&quot;hi&quot;) . hi .",
            "url": "https://joshuaw03628.github.io/Repository-1/notebooks/jupytertest",
            "relUrl": "/notebooks/jupytertest",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "TESTING KERNELS",
            "content": "echo Hello . Hello .",
            "url": "https://joshuaw03628.github.io/Repository-1/notebooks/bashtest",
            "relUrl": "/notebooks/bashtest",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Final Corrections 1",
            "content": "Final Score . . Honestly surprised with myself, despite doing it with my friend Eli, I also had some usage from the internet and my blog but I did grasp a lot of the concepts. Some of which are really just basic math . Correction 1 . . So for this one I misread the function. I could have gotten this one correct especially because I know iv’e seen it before. Nothing much to reflect on. . Correction 2 . . For this question it was again a miscalculation on my part, I thought that I knew what it was because im pretty sure in my ability to identify functions. . Things I Looked Up . Questions Specifically . Question 24 | Question 29 | Question 36 | Question 47 | . Something To Note . I used my previous AP classroom corrections for the beginning questions mainly 1-16 .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/11/09/FinalTestCorrections.html",
            "relUrl": "/posts/2022/11/09/FinalTestCorrections.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Teams Reflection",
            "content": "Cool Coders Ava Carlson . This group made a project that would help ASB track their merchandise sales and Cost dependencies. This project was cool and could potentially be a tool for ASB to use in the future. . Jake Warrens Group . Jakes did very well as a scrum master to make sure to record their process and what their plan layout was. He made a function that records the top 10 artists and songs of the week and in different genre. This project was cool overall and he hit some good topics. . SLimey Turtles Project . The CSA Slimy Turtles, Im not sure what they created but their Process was cool , they did a similar process to what mr.mort asks of us with bullets and what each member is doing. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/11/04/teamreflection.html",
            "relUrl": "/posts/2022/11/04/teamreflection.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Night at the museum tri 1 yes",
            "content": "What I did at night at the museum . What I saw . I walked through Mr.Mortensons class first and saw a bunch of people, parents, students, etc. It was cool but I was early so I walked around, I saw art, digital media, games and many other things. What I saw was all positive. No one was upset with their interaction with the teacher and all the parents had nothing but good things to say. . Nico Kermani CP . . this was a cool photo because it is made by someone I know and hes a Pheonix suns fan so it is funny because it relates to him. | The colors and the design really pop | I also hate the pheonix suns | | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/11/04/Night@Museum.html",
            "relUrl": "/posts/2022/11/04/Night@Museum.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "AP Classroom Week 2 Test Corrections.",
            "content": "AP Classroom Week 2 Test Corrections. . Identifying Errors Quiz . For the Identifying Errors Quiz I scored a 1/3, I got the first question correct with identifying the order of code segments. . . In the second question I was asked to identify which set of contents would not work for the function. I chose D, the input being 1,2,3., the correct answer was C, -1,0,1. . . In the third question I also answered incorrectly. I was asked to choose which values would not display the correct grade for the value input. I chose 6,7. I realized my mistake because 8 did not fit in the category between 7 and 9 which caused my answer to be only half correct. . . Internet Quiz . On the first question I answered Incorrectly, I answered A. The correct answer was B . On the second question I answered correctly . On the third question I answered correctly .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/10/11/markdownCorrections.html",
            "relUrl": "/posts/2022/10/11/markdownCorrections.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "API Testing",
            "content": "from polygon import RESTClient client = RESTClient(&quot;4pZoY9gYTgLeKmvejpqzgChg8ElExSJr&quot;) # api_key is used aggs = client.get_aggs(&quot;AAPL&quot;, 1, &quot;day&quot;, &quot;2022-04-04&quot;, &quot;2022-04-04&quot;) print(aggs) . [Agg(open=174.57, high=178.49, low=174.44, close=178.44, volume=76545983.0, vwap=177.4855, timestamp=1649044800000, transactions=630374, otc=None)] .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/10/11/APISTUFF.html",
            "relUrl": "/posts/2022/10/11/APISTUFF.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "AP classroom scores week 2",
            "content": "what were my scores . . Problem . I feel a little bit better this time we see some improvement, looking forward to further learning. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/10/10/markdownAPCSPscores2.html",
            "relUrl": "/posts/2022/10/10/markdownAPCSPscores2.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "AP classroom scores",
            "content": "what were my scores . . Problem . I feel like I overthought it since this is a new topic for me im going to trust my gut next time. .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/10/05/APCSP-markdown.html",
            "relUrl": "/posts/2022/10/05/APCSP-markdown.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://joshuaw03628.github.io/Repository-1/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . from logging.handlers import BufferingHandler # this is my info db menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;shake&quot;: 2.50, &quot;cookie&quot;:0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) print(&quot;your total will be&quot;) # Set sum Variable - total total = 0 #set list as l l = [] #start while loop while item != &quot;&quot;: #append is adding the items from the menu to my list l l.append(item) #sets item as a variable using the input that matches with the info db item = input(&quot;Please select an item from the menu, or click enter if you are done.&quot;) #function that adds up the items you bought for item in l: total += menu[item] #code should add the price of the menu items selected by the user #rounds total to 3 place values print(total) . Menu burger $3.99 fries $1.99 drink $0.99 shake $2.5 cookie $0.99 your total will be 5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://joshuaw03628.github.io/Repository-1/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Week 5 C Criteria",
            "content": ". Meet college board criteria: . use data abstraction use procedural abstraction show testing . An first idea, Snake, meets all criteria . Its Fun to code which causes growth learning, and I can use things learned from app studio and previous students as inspilagerism in order to create. My second idea, checkers . | My first idea, checkers, meets all criteria data abstraction with a 2D array when loading the board and pieces. procedural abstraction with how the player interacts with the screen and interacts with the pieces on the board. | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/09/27/picmarkdown.html",
            "relUrl": "/posts/2022/09/27/picmarkdown.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Javatable",
            "content": "Week Week Name Learning . Week 1 | Tool Setup | How to authorize my computer and install things. | . Week 2 | Intro to Python | How to setup VsCode, Basics of Github and VsCode. | . Week 3 | Data Abstraction | Still Getting used to the basics of Github and VsCode | . &lt;/table&gt; .",
            "url": "https://joshuaw03628.github.io/Repository-1/2022/09/27/JavaTable.html",
            "relUrl": "/2022/09/27/JavaTable.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "JavaScript Data Input",
            "content": "Console.log . console.log(&quot;Hello, World!&quot;); . Hello, World! . variable usage of console.log . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . different usage of console.log . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . log usage of console.log . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Ex: String,List,Object . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Defining Functions, Variables, and Titles . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Defining Persons and Getting Data Input . // define a student Array of Person(s) var students = [ new Person(&quot;Josh&quot;, &quot;Joshua03628&quot;, 2024), new Person(&quot;Ryan&quot;, &quot;RyanRob327&quot;, 2024), new Person(&quot;Eli&quot;, &quot;EliGilmour&quot;, 2024), new Person(&quot;Chris&quot;, &quot;CodingChris&quot;, 2024), new Person(&quot;Jefferey&quot;, &quot;unkown&quot;, 2024), new Person(&quot;Khalid&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Josh&#39;, ghID: &#39;Joshua03628&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Ryan&#39;, ghID: &#39;RyanRob327&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Eli&#39;, ghID: &#39;EliGilmour&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Chris&#39;, ghID: &#39;CodingChris&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Jefferey&#39;, ghID: &#39;unkown&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Khalid&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . Filtering Data Input into a Table . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Josh | Joshua03628 | 2024 | Student | Ryan | RyanRob327 | 2024 | Student | Eli | EliGilmour | 2024 | Student | Chris | CodingChris | 2024 | Student | Jefferey | unkown | 2024 | Student | Khalid | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/09/26/JavaScript.html",
            "relUrl": "/posts/2022/09/26/JavaScript.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Week 3 Brainstorm",
            "content": "Flowchart . Quiz . EQ: What can our questions be to help benefit people in some way | The quiz needs 3 questions minimum, we plan to divide it into free response,multiple choice, and click all that apply | possibly adding a score after every question | . Possible Extra . Pong, we plan to create pong in our app studio if we have enough time | . What is Required . What is the programs purpose and function | be able to talk about how the program manages complexity in the context of your own program | Row 4: Procedural Abstraction Assesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - procedures/functions) | Row 5: Algorithm Implementation Assesses students’ ability to implement and apply an algorithm. (Skill Algorithms and Program Development) | Row 6: Testing Assesses students’ ability to investigate the situation, context,or task. (Skill Computational Solution Design - testing) | . What the Process actually was . I started out messing around with keys and trying different things in order to understand the code that i was dealing with. | Once I was comfortable I first Started out with creating my homepage I decided on my own template and went off of that. | At this point I was Comfortable with the designs but still needed help with some of the code I was dealing with. | I asked around and understood what meant what and what went there it led me to creating all of my questions as well as a name page. | I added a few extra things in to make sure that I was adept with this process and completed any finishing touches. | Overall this project was fun and I learned some stuff about javascript. | Link: https://studio.code.org/projects/applab/x90pxE2I0fhd06BccaDa71bTxjLLGqgn_hDI-PEkpvI/edit | . Design, Successes, and Difficulties . Design . My Design will be pretty unplanned because I don’t know how to code especially in JavaScript so I will work with well, whatever works | . Success . I Was very successful at the design elements labeling, switching screens, images, etc. | . Difficulties . I had Difficulties With the Results Page but got information from my table allowing me to create it | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/09/08/markdownbrainstorm.html",
            "relUrl": "/posts/2022/09/08/markdownbrainstorm.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Jotting Notes",
            "content": "what is an Info DB . InfoDB is a list and is denoted with square Brackets | On the first line its completely empty | InfoDB.append- whatever is in is whats added | {this is a dictionary key } | Value: First Name, Key: Joshua | ” turns into a string” - collection of characters | def means its a function | string is just text | integer is just a number | float is a more complex version of an integer | boolean: a true or false statement | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/09/07/markdownlist.html",
            "relUrl": "/posts/2022/09/07/markdownlist.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Making a Table",
            "content": "Week Title What I Learned . 00 | Tool Setup | How to Install stuff on my computer | . 01 | Intro to python | How to set up a markdown file as well as how to make notebooks, posts, issues, etc. | . 02 | Data Abstraction | How to make tables,quizzes,and do other fun stuff with my blog and vscode. | . 03 | Creative Development | TBD | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/09/05/markdownprogresstracker.html",
            "relUrl": "/posts/2022/09/05/markdownprogresstracker.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Lists & Dictionaries",
            "content": "Info DB . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Josh&quot;, &quot;LastName&quot;: &quot;Williams&quot;, &quot;MiddleName&quot;: &quot;Benjamin&quot;, &quot;DOB&quot;: &quot;January 6&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;joshuawilliams52006@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2011-Nissan Versa&quot;], &quot;Favorite_Show&quot;: [&quot;SpongeBob&quot;], &quot;Favorite_Games&quot;: [&quot;Apex-Legends&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Ryan&quot;, &quot;LastName&quot;: &quot;Mcweeny&quot;, &quot;MiddleName&quot;: &quot;Robert&quot;, &quot;DOB&quot;: &quot;March 27&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;N/A&quot;, &quot;Owns_Cars&quot;: [&quot;2016 GMC Acadia&quot;], &quot;Favorite_Show&quot;: [&quot;SpongeBob&quot;], &quot;Favorite_Games&quot;: [&quot;Minecraft&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Josh&#39;, &#39;LastName&#39;: &#39;Williams&#39;, &#39;MiddleName&#39;: &#39;Benjamin&#39;, &#39;DOB&#39;: &#39;January 6&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;joshuawilliams52006@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;2011-Nissan Versa&#39;], &#39;Favorite_Show&#39;: [&#39;SpongeBob&#39;], &#39;Favorite_Games&#39;: [&#39;Apex-Legends&#39;]}, {&#39;FirstName&#39;: &#39;Ryan&#39;, &#39;LastName&#39;: &#39;Mcweeny&#39;, &#39;MiddleName&#39;: &#39;Robert&#39;, &#39;DOB&#39;: &#39;March 27&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;N/A&#39;, &#39;Owns_Cars&#39;: [&#39;2016 GMC Acadia&#39;], &#39;Favorite_Show&#39;: [&#39;SpongeBob&#39;], &#39;Favorite_Games&#39;: [&#39;Minecraft&#39;]}] . For Loop . This is a for loop example . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;MiddleName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Fav Show: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite_Show&quot;])) print(&quot; t&quot;, &quot;Fav Games: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite_Games&quot;])) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Josh Benjamin Williams Residence: San Diego Birth Day: January 6 Cars: 2011-Nissan Versa Fav Show: SpongeBob Fav Games: Apex-Legends Ryan Robert Mcweeny Residence: San Diego Birth Day: March 27 Cars: 2016 GMC Acadia Fav Show: SpongeBob Fav Games: Minecraft . Recursive Loop . This is an Example of a Recursive Loop . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot; nRecursive loop output: n&quot;) recursive_loop(0) . Recursive loop output: Josh Benjamin Williams Residence: San Diego Birth Day: January 6 Cars: 2011-Nissan Versa Fav Show: SpongeBob Fav Games: Apex-Legends Ryan Robert Mcweeny Residence: San Diego Birth Day: March 27 Cars: 2016 GMC Acadia Fav Show: SpongeBob Fav Games: Minecraft . While Loop . This is an example of a while loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Josh Benjamin Williams Residence: San Diego Birth Day: January 6 Cars: 2011-Nissan Versa Fav Show: SpongeBob Fav Games: Apex-Legends Ryan Robert Mcweeny Residence: San Diego Birth Day: March 27 Cars: 2016 GMC Acadia Fav Show: SpongeBob Fav Games: Minecraft . Reverse List . This is a Reverse List example . list = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;] print(&#39;Regular List:&#39;, list) list.reverse() print(&#39;Reversed List:&#39;, list) . Regular List: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;] Reversed List: [&#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;] . Fortnite Quiz . question = [] # creates empty list question.append({ # adds dictionary with question and answer to list using .append &quot;Question&quot;: &quot;Whats the best game ever&quot;, &quot;Answer&quot;: &quot;Fortnite&quot;, }) question.append({ &quot;Question&quot;: &quot;Who is the best Fortnite player&quot;, &quot;Answer&quot;: &quot;Ninja&quot;, }) question.append({ &quot;Question&quot;: &quot;Whats the fortnite mascot&quot;, &quot;Answer&quot;: &quot;A Llama&quot;, }) question.append({ &quot;Question&quot;: &quot;What season did Josh Start Fortnite&quot;, &quot;Answer&quot;: &quot;0&quot;, }) points = 0 print(&quot;Take this quiz about planes.&quot;) for i in question: # for loop repeats every time an answer is given print(i[&quot;Question&quot;]) response = input(i[&quot;Question&quot;]) print(response) if response == i[&quot;Answer&quot;]: points += 1 print(&quot;Correct, you have &quot;, points, &quot; points!&quot;) else: print(&quot;Incorrect, the answer was; &quot;, i[&quot;Answer&quot;]) print(&quot;You have finished the quiz with &quot;, points, &quot; out of &quot;, len(question), &quot; points!&quot;) . Take this quiz about planes. Whats the best game ever Incorrect, the answer was; Fortnite Who is the best Fortnite player Incorrect, the answer was; Ninja Whats the fortnite mascot Incorrect, the answer was; A Llama What season did Josh Start Fortnite Incorrect, the answer was; 0 You have finished the quiz with 0 out of 4 points! .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/notetaker",
            "relUrl": "/posts/notetaker",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Alumni Notes",
            "content": "Alumni Notes . Com-Sci is very egotistical and competitive | Focus on your own curve/level | I really liked this quote; Theres a Steve Jobs out there beating you 100/100 times so just focus on yourself | Google is really resourceful so use it to your advantage | Ask Questions to people who know what they’re doing, Com-Sci is about finding solutions to a problem it doesn’t matter how you get your answer | Getting started is a big challenge so just keep your head up. | .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/08/29/markdownAlumnNotes.html",
            "relUrl": "/posts/2022/08/29/markdownAlumnNotes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "NBA Quiz",
            "content": "toc: true | badges: true | comments: true | author: Josh Williams | categories: [fastpages,jupyter] | . score = 0 questions = 4 def q_a(q, a): answer = input(q) score = 0 print(ready) if answer == a: print(&quot;Good job! That is correct!&quot;) score = 1 else: print(&quot;Nice try! The answer is &quot; + a + &quot;.&quot;) return score #intro: name = input(&quot;Enter your name:&quot;) print(&quot;Hey! &quot; + name) ready = input(&quot;This quiz will have &quot; + str(questions) + &quot; questions that will test your abilities to identify NBA basketball players based on their build and team. Are you ready to start this quiz? Answer yes or no.&quot;) if ready == &quot;yes&quot;: print(&quot;Let&#39;s get started!&quot;) else: print(&quot;This is easy!&quot;) #question 1: score = score + q_a(&quot;Question 1: What player is 6&#39;9 and the started SF for the LA Lakers&quot;, &quot;Lebron&quot;) #question 2: score = score + q_a(&quot;Question 2: What player is the superstar for the memphis grizzlies?&quot;, &quot;Ja Morant&quot;) #question 3: score = score + q_a(&quot;Question 3: What player is the best shooter in the league currently?&quot;, &quot;Stephen Curry&quot;) #question 4: score = score + q_a(&quot;Question 4: What team is the best?&quot;, &quot;Clippers&quot;) #ending score if score &gt;= 3: print(&quot;Congratulations! You completed this quiz with an amazing score! You scored a: {}/4&quot; .format(score)) else: print(&quot;Congratulations! You completed the quiz. Your score is a: {}/4&quot; .format(score)) . Hey! lebon This is easy! no Nice try! The answer is Lebron. no Nice try! The answer is Ja Morant. no Nice try! The answer is Steph Curry. no Nice try! The answer is Clippers. Congratulations! You completed the quiz. Your score is a: 0/4 .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/08/28/pythonquiz.html",
            "relUrl": "/posts/2022/08/28/pythonquiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Bash Notebook",
            "content": "echo &quot;version check&quot; python --version python2 --version python3 --version . version check Python 3.9.12 Python 2.7.18 Python 3.9.12 . echo &quot;check conda packages&quot; conda list . check conda packages # packages in environment at /Users/josh/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo &quot;jupyter check&quot; test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . jupyter check python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/josh/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python3 /Users/josh/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/08/26/Bash-Notebook.html",
            "relUrl": "/posts/2022/08/26/Bash-Notebook.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "First Notebook",
            "content": "Print(&quot;Hello World&quot;) .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2022/08/22/notebook.html",
            "relUrl": "/posts/2022/08/22/notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "First Markdown",
            "content": "First Post . Sub Heading 1 . This is my description . one | two | three | . This is a block of code . Print(&quot;Hello World&quot;) .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/testmarkdown",
            "relUrl": "/posts/testmarkdown",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://joshuaw03628.github.io/Repository-1/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://joshuaw03628.github.io/Repository-1/posts/2020/02/20/test.html",
            "relUrl": "/posts/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Vocab Page",
          "content": "Vocab List . function - A group of related statements that perform a specific task def - The command to define a function parameter - Variables for the values the function needs. Is passed as an argument when the function is called string - A series of readable or usable sentences that the user will use len() - Returns the length (the number of items) of an object list - A “container” that can store any kinds of values . Helpful Commands . cd: change directory | cat {filename}: concatenate | pwd: print working directory | git clone {url}: clones GitHub repository | ls: list files in a directory | cp {filename}: copy | .",
          "url": "https://joshuaw03628.github.io/Repository-1/_pages/2022-08-29-markdownvocab.html",
          "relUrl": "/_pages/2022-08-29-markdownvocab.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "My name is Josh Williams and I am 16 years old. I enjoy spending my days chilling with my dog Nash. (Insert Picture) I am currently working a job instead of an extracurricular such as a sport or any other type of club. . Here Is A Picture of Me and My Family .",
          "url": "https://joshuaw03628.github.io/Repository-1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://joshuaw03628.github.io/Repository-1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}